<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>nullfactory.net</title><link>http://nullfactory.net/rss.xml</link><description>nullfactory.net</description><item><guid isPermaLink="true">http://nullfactory.net/2015/03/create-elevated-command-prompt-different-user-context/</guid><link>http://nullfactory.net/2015/03/create-elevated-command-prompt-different-user-context/</link><title>Create an Elevated Command Prompt Running Under a Different User Context</title><description>&lt;p&gt;User Account Control (UAC) is a security mechanism that is available in most modern versions of Windows. It restricts the ability to make changes to a computer environment without the explicit consent of an administrator. And as is with most production environments, it is very likely that this feature is already enabled. And just as likely, is the need to execute applications and commands under a different user within an elevated context during application deployment or maintenance. &lt;/p&gt;

&lt;p&gt;This is achieved by using the &lt;code&gt;runas&lt;/code&gt; command with the &lt;code&gt;/noprofile&lt;/code&gt; flag. The command below creates an elevated command line running under the &lt;code&gt;wunder\admin&lt;/code&gt; user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;runas /noprofile /user:wunder\admin cmd 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, all commands executed within this new command prompt would be in the same elevated status.&lt;/p&gt;

</description><pubDate>Fri, 06 Mar 2015 18:30:00 Z</pubDate><a10:updated>2015-03-06T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;User Account Control (UAC) is a security mechanism that is available in most modern versions of Windows. It restricts the ability to make changes to a computer environment without the explicit consent of an administrator. And as is with most production environments, it is very likely that this feature is already enabled. And just as likely, is the need to execute applications and commands under a different user within an elevated context during application deployment or maintenance. &lt;/p&gt;

&lt;p&gt;This is achieved by using the &lt;code&gt;runas&lt;/code&gt; command with the &lt;code&gt;/noprofile&lt;/code&gt; flag. The command below creates an elevated command line running under the &lt;code&gt;wunder\admin&lt;/code&gt; user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;runas /noprofile /user:wunder\admin cmd 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, all commands executed within this new command prompt would be in the same elevated status.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ss64.com/nt/runas.html"&gt;Runas - Run under a different user account | Windows CMD | SS64.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://windows.microsoft.com/en-us/windows7/products/features/user-account-control"&gt;User Account Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/42537/is-there-any-sudo-command-for-windows"&gt;SuperUser - Is there any 'sudo' command for Windows?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12903629/how-do-i-run-a-program-from-command-prompt-as-a-different-user-and-as-an-admin"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/03/creating-a-self-signed-wild-card-ssl-certificate/</guid><link>http://nullfactory.net/2015/03/creating-a-self-signed-wild-card-ssl-certificate/</link><title>Creating a Self-Signed Wild Card SSL Certificate for Your Development Environment</title><description>&lt;p&gt;Secure Socket Layer (SSL) is a security standard used to ensure secure communication between a web server and browser and used in most modern web application. As a developer it is prudent to setup your development environment to closely resemble production as much as possible, including security concerns. However, getting a full fledged CA SSL certificate for you development environment might not be the most cost-effective solution. Therefore post summarizes the steps I take to create a self signed wild card certificate to be used in the internal environments. My guide is based on this &lt;a href="https://www.macaw.nl/weblog/2013/6/configuring-an-asp-net-project-for-development-with-ssl"&gt;excellent post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Create the Certificate&lt;/h2&gt;

&lt;p&gt;In order to create the certificate we would be using the &lt;code&gt;MakeCert.exe&lt;/code&gt; tool which can be found at &lt;code&gt;C:\Program Files (x86)\Windows Kits\8.1\bin\x64\&lt;/code&gt;. This command creates the certificate and adds it to the logged in user's personal certificate store:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;makecert -r -pe -e 01/01/2099 -eku 1.3.6.1.5.5.7.3.1 -ss My -n CN="*.wunder.local" -sky exchange -sp "Microsoft RSA SChannel Cryptographic Provider" -sy 12 -len 2048 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some of the notable flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-r&lt;/strong&gt; - Indicates that we're creating a self-signed certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-pe&lt;/strong&gt; - Includes the private key in the certificate and makes it exportable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-e&lt;/strong&gt; - The validity period of the certificate.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;-n&lt;/strong&gt; - The subject's certificate name - specify the wildcard url. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/1_CreateCertificate.png" alt="Create Certificate" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description><pubDate>Wed, 04 Mar 2015 18:30:00 Z</pubDate><a10:updated>2015-03-04T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;Secure Socket Layer (SSL) is a security standard used to ensure secure communication between a web server and browser and used in most modern web application. As a developer it is prudent to setup your development environment to closely resemble production as much as possible, including security concerns. However, getting a full fledged CA SSL certificate for you development environment might not be the most cost-effective solution. Therefore post summarizes the steps I take to create a self signed wild card certificate to be used in the internal environments. My guide is based on this &lt;a href="https://www.macaw.nl/weblog/2013/6/configuring-an-asp-net-project-for-development-with-ssl"&gt;excellent post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Create the Certificate&lt;/h2&gt;

&lt;p&gt;In order to create the certificate we would be using the &lt;code&gt;MakeCert.exe&lt;/code&gt; tool which can be found at &lt;code&gt;C:\Program Files (x86)\Windows Kits\8.1\bin\x64\&lt;/code&gt;. This command creates the certificate and adds it to the logged in user's personal certificate store:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;makecert -r -pe -e 01/01/2099 -eku 1.3.6.1.5.5.7.3.1 -ss My -n CN="*.wunder.local" -sky exchange -sp "Microsoft RSA SChannel Cryptographic Provider" -sy 12 -len 2048 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some of the notable flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-r&lt;/strong&gt; - Indicates that we're creating a self-signed certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-pe&lt;/strong&gt; - Includes the private key in the certificate and makes it exportable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-e&lt;/strong&gt; - The validity period of the certificate.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;-n&lt;/strong&gt; - The subject's certificate name - specify the wildcard url. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/1_CreateCertificate.png" alt="Create Certificate" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--excerpt--&gt;

&lt;h3&gt;Verify Creation&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open a new &lt;code&gt;Microsoft Management Console (mmc.exe)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;Certificates&lt;/code&gt; Snap-In for &lt;code&gt;My Account&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under the &lt;code&gt;Personal&lt;/code&gt; node, ensure that the newly created certificate exists.  &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/2_CreateCertificate.png" alt="Verify Certificate" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Export Certificate&lt;/h3&gt;

&lt;p&gt;Next we export the certificate, one with the private key (pfx) and one without (cer). &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Within the same snap-in, right click on the certificate and select export. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/3_ExportCertificate.png" alt="Export Certificate Menu" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the option to export the private key. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/4_ExportPfxWizard.png" alt="Export Pfx Wizard 1" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/5_ExportPfxWizard.png" alt="Export Pfx Wizard 2" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide a password to protect the private key. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/6_ExportPfxWizard.png" alt="Export Pfx Wizard 3" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/7_ExportPfxWizard.png" alt="Export Pfx Wizard 4" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide a location to export the file.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/8_ExportPfxWizard.png" alt="Export Pfx Wizard 5" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/9_ExportPfxWizard.png" alt="Export Pfx Wizard 6" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next let export the (.cer) file. Let's repeat the steps 1-4 but this time opting out of exporting the private key.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/10_ExportCerWizard.png" alt="Export Cer Wizard 1" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/11_ExportCerWizard.png" alt="Export Cer Wizard 2" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/12_ExportCerWizard.png" alt="Export Cer Wizard 3" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/13_ExportCerWizard.png" alt="Export Cer Wizard 4" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/14_ExportCerWizard.png" alt="Export Cer Wizard 5" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Now, we install the pfx on the web server and each of the client machines consuming the web application.&lt;/p&gt;

&lt;h4&gt;Web Server&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The easiest way to install the certificate is to right-click the certificate within explorer and select &lt;code&gt;Install PFX&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/15_InstallPfxWizard.png" alt="Install Pfx Wizard 1" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This would launch the Certificate Import Wizard. Select the &lt;code&gt;Local Machine&lt;/code&gt; as the certificate store.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/16_InstallPfxWizard.png" alt="Install Pfx Wizard 2" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/17_InstallPfxWizard.png" alt="Install Pfx Wizard 3" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide the password for the private key. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/18_InstallPfxWizard.png" alt="Install Pfx Wizard 4" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that the certificate is installed under the &lt;code&gt;Personal&lt;/code&gt; store.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/19_InstallPfxWizard.png" alt="Install Pfx Wizard 5" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/20_InstallPfxWizard.png" alt="Install Pfx Wizard 6" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/21_InstallPfxWizard.png" alt="Install Pfx Wizard 7" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Navigate to Internet Information Services (IIS) Manager and make sure that the certificate is visible.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/22_VerifyIIS.png" alt="Verify Certificate in IIS" /&gt;&lt;/p&gt;

&lt;p&gt;Bind the certificate to the SSL Port and configure the web application as necessary.&lt;/p&gt;

&lt;h4&gt;Client Machines&lt;/h4&gt;

&lt;p&gt;Each of the client machines accessing the web application would have to trust the new certificate. This is done by adding the certificate to the the &lt;code&gt;Trusted Root Certification Authorities&lt;/code&gt; store.  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;On the client machine, right-click the certificate and selecting &lt;code&gt;Install&lt;/code&gt; from the menu. On the wizard select the &lt;code&gt;Local Machine&lt;/code&gt; as the store.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/23_InstallCertificate.png" alt="Install as Trusted Authority 1" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the certificate to the &lt;code&gt;Trusted Root Certification Authorities&lt;/code&gt; store.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/24_InstallCertificate.png" alt="Install as Trusted Authority 2" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/25_InstallCertificate.png" alt="Install as Trusted Authority 3" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SSWildCardSSL/26_InstallCertificate.png" alt="Install as Trusted Authority 4" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As suggested in the &lt;a href="https://www.macaw.nl/weblog/2013/6/configuring-an-asp-net-project-for-development-with-ssl"&gt;original article&lt;/a&gt;, this would be a good time check-in the certificates into source control so that the entire development team has access to the same files.&lt;/li&gt;
&lt;li&gt;While &lt;code&gt;Makecert.exe&lt;/code&gt; was used to create the certificate, there are other options such as OpenSSL that would work just the same. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.macaw.nl/weblog/2013/6/configuring-an-asp-net-project-for-development-with-ssl"&gt;Configuring an ASP.NET project for development with SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.technet.com/b/salbawany/archive/2014/05/24/how-to-create-a-self-signed-wild-card-ssl-certificate.aspx"&gt;Technet - Faisal (Sal) Bawany’s TechNet Blog - How to create a self-signed Wildcard SSL Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/bfsktky3(v=vs.110).aspx"&gt;MSDN - Makecert.exe (Certificate Creation Tool)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/26186780/difference-between-makecert-and-openssl-wrt-c-sharp-sslstream"&gt;Difference between MakeCert and OpenSSL wrt C# SslStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/26681192/whats-the-difference-between-the-personal-and-web-hosting-certificate-store"&gt;StackOverFlow - What's the difference between the Personal and Web Hosting certificate store?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/03/could-not-establish-trust-relationship-ssl-tls/</guid><link>http://nullfactory.net/2015/03/could-not-establish-trust-relationship-ssl-tls/</link><title>Could Not Establish Trust Relationship for SSL/TLS Secure Channel</title><description>&lt;p&gt;A while back I worked on a project that required me to integrate to a third-party web service. The web service also in development in parallel by the external team and our team was provided a development endpoint that would be used for testing. &lt;/p&gt;

&lt;p&gt;The problem was the certificate used in the SSL was the same as the one production. This resulted in any call to the web service throwing an &lt;code&gt;Could not establish trust relationship for SSL/TLS secure channel&lt;/code&gt; error because of the url mismatch. &lt;/p&gt;

&lt;p&gt;Due to various constraints we were unable to get certificate replaced. So our temporary work around was to make our code to explicitly trust the external web service host:&lt;/p&gt;

</description><pubDate>Sun, 01 Mar 2015 18:30:00 Z</pubDate><a10:updated>2015-03-01T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;A while back I worked on a project that required me to integrate to a third-party web service. The web service also in development in parallel by the external team and our team was provided a development endpoint that would be used for testing. &lt;/p&gt;

&lt;p&gt;The problem was the certificate used in the SSL was the same as the one production. This resulted in any call to the web service throwing an &lt;code&gt;Could not establish trust relationship for SSL/TLS secure channel&lt;/code&gt; error because of the url mismatch. &lt;/p&gt;

&lt;p&gt;Due to various constraints we were unable to get certificate replaced. So our temporary work around was to make our code to explicitly trust the external web service host:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using System.Net;
using System.Net.Security;

namespace SslTest
{
    public static class SslHelper
    {
        /// &amp;lt;summary&amp;gt;
        /// Explicitly trust the list of hosts provided and ignores any SSL trust related errors.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="hosts"&amp;gt;List of hosts that are trusted&amp;lt;/param&amp;gt;
        /// &amp;lt;remarks&amp;gt;Only to be used in development environment. Do not use in production!&amp;lt;/remarks&amp;gt;
        public static void EnableTrustedHosts(string[] hosts)
        {
            ServicePointManager.ServerCertificateValidationCallback =
                (sender, certificate, chain, errors) =&amp;gt;
                {
                    if (errors == SslPolicyErrors.None)
                    {
                        return true;
                    }

                    var request = sender as HttpWebRequest;
                    if (request != null)
                    {
                        return hosts.Contains(request.RequestUri.Host);
                    }

                    return false;
                };
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above callback invoked every time a certificate is validated. Call it once before making requests to the web service.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/703272/could-not-establish-trust-relationship-for-ssl-tls-secure-channel-soap"&gt;StackOverFlow - Could not establish trust relationship for SSL/TLS secure channel — SOAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/02/obfuscate-sharepoint-ssrs-datasource/</guid><link>http://nullfactory.net/2015/02/obfuscate-sharepoint-ssrs-datasource/</link><title>Obfuscating a SharePoint-Integrated SSRS DataSource's Connection String</title><description>&lt;p&gt;When SQL Server Reporting Services (SSRS) is deployed as an SharePoint integrated solution, it enables much of its functionality to be managed right from within SharePoint. Starting from the 2013 version, the integration between SharePoint and SQL Server Reporting Services 2012 is more tightly coupled than previous iterations. &lt;/p&gt;

&lt;p&gt;One feature in integrated mode is the ability to have the data sources (.rsds) and report files (.rdl) within a document library itself. This means that reports can reference a DataSource within any document library in the SharePoint site. &lt;/p&gt;

&lt;p&gt;In order for the report to work the user should have read permission on both the data source as well as the report file. The problem with this is that the same user can now potentially view the settings within the data source file, including the connection string.&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;In order to protect the connection string, I came up with a solution to obscure it through encryption. The solution can be broken down to two major steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Force the reports to get the connection string by evaluating an expression embedded within itself. &lt;/li&gt;
&lt;li&gt;Within this expression, call some custom code which manages the retrieval and decryption of the connection string. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the limitations with this method is that you can no longer use a shared data source and each report has to have its credentials embedded.&lt;/p&gt;

&lt;p&gt;In my example below, I will be retrieving the configuration string from a configuration list stored in the same SharePoint server. &lt;/p&gt;

</description><pubDate>Sun, 15 Feb 2015 18:30:00 Z</pubDate><a10:updated>2015-02-15T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;When SQL Server Reporting Services (SSRS) is deployed as an SharePoint integrated solution, it enables much of its functionality to be managed right from within SharePoint. Starting from the 2013 version, the integration between SharePoint and SQL Server Reporting Services 2012 is more tightly coupled than previous iterations. &lt;/p&gt;

&lt;p&gt;One feature in integrated mode is the ability to have the data sources (.rsds) and report files (.rdl) within a document library itself. This means that reports can reference a DataSource within any document library in the SharePoint site. &lt;/p&gt;

&lt;p&gt;In order for the report to work the user should have read permission on both the data source as well as the report file. The problem with this is that the same user can now potentially view the settings within the data source file, including the connection string.&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;In order to protect the connection string, I came up with a solution to obscure it through encryption. The solution can be broken down to two major steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Force the reports to get the connection string by evaluating an expression embedded within itself. &lt;/li&gt;
&lt;li&gt;Within this expression, call some custom code which manages the retrieval and decryption of the connection string. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the limitations with this method is that you can no longer use a shared data source and each report has to have its credentials embedded.&lt;/p&gt;

&lt;p&gt;In my example below, I will be retrieving the configuration string from a configuration list stored in the same SharePoint server. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3&gt;Create the report extensions assembly&lt;/h3&gt;

&lt;p&gt;Here's a summary of steps used to create report extension. You can find a link to the full source at the bottom of the post.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create new a class library to host your custom code.&lt;/li&gt;
&lt;li&gt;Next, sign the assembly as we would be deploying it into the Global Assembly Cache. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order for the report server to call the custom code, the strong-named assembly must be marked with the &lt;code&gt;[assembly: AllowPartiallyTrustedCallers]&lt;/code&gt; attribute. Let's do this now.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/10_AllowPartiallyTrustedCallers.png" alt="Allow Partially Trusted Callers" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new public class and method that would retrieve the connection string. This method would take the report server url as its only parameter. This parameter would be parsed and later used to generate the REST call to SharePoint. Next, add a &lt;code&gt;[SecuritySafeCritical]&lt;/code&gt; attribute to the method, we need to this to perform operations that require access outside of the sandbox. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/20_CodeGetConnectionString.png" alt="GetConnectionStringMethod" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, create a helper method that retrieves the default credentials. This too would be decorated with the &lt;code&gt;[SecuritySafeCritical]&lt;/code&gt; attribute. In the body of the method, I explicitly assert the &lt;code&gt;EnvironmentPermission(EnvironmentPermissionAccess.Read, "USERNAME")&lt;/code&gt; permissions before using the &lt;code&gt;CredentialStore&lt;/code&gt;. We would run into a security exception if the explicit assertion is not done. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/50_CodeGetSecurityCredentials.png" alt="GetSecurityCredential Method" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, create the method that makes the REST call to retrieve the obfuscated connection string from a SharePoint configuration list.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/40_CodeGetWebPermission.png" alt="GetConnectionStringFromSharePointList Method" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;EnvironmentPermission&lt;/code&gt; assertion operation has to be in its own method with its own &lt;code&gt;[SecuritySafeCritical]&lt;/code&gt; attribute for it to work together with the &lt;code&gt;WebPermission&lt;/code&gt; assertion. Otherwise the following exception would be thrown:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Exception: System.Security.SecurityException Exception Message: Stack walk modifier must be reverted before another modification of the same type can be performed. Stacktrace:    at System.Security.CodeAccessSecurityEngine.Assert(CodeAccessPermission cap, StackCrawlMark&amp;amp; stackMark)
   at System.Security.CodeAccessPermission.Assert()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After numerous failed attempts at accessing the SPList via the SharePoint object model (I kept running into exceptions stating that I required full trust), I find that partial trust mode is &lt;a href="https://msdn.microsoft.com/en-us/library/office/dn268593.aspx"&gt;no longer supported and has been deprecated&lt;/a&gt;. As I was unable to find anyone online who had successfully got it to work, I opted to access the list via the REST service for its lesser dependencies and security permission requirements. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile and deploy the assembly into the Global Assembly Cache.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Setting up the Report&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open up a copy of your report using the &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=29072"&gt;latest version of Report Builder&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Right click on the work space area outside to bring up the context menu. Select the &lt;code&gt;Report Properties...&lt;/code&gt; menu item which opens up the &lt;code&gt;Report Properties&lt;/code&gt; dialog.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/60_ReportPropertiesContextMenu.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/70_ReoprtPropertiesDialog.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to the &lt;code&gt;References&lt;/code&gt; tab and add an entry for our custom assembly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, create a new entry for the class containing our custom logic. Ensure that the class name is referred to using it full namespace and provide an instance name that would be used to call our code from within the report.  &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/80_ReportPropertiesDialog.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that our declarations have been done, edit the report data source for the report.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/90_EditDataSource.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;fx&lt;/code&gt; button to open up the expressions dialog.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/100_ConnStringSetExpression0.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit the expression to use the new custom method created previously. Pass in &lt;code&gt;Globals!ReportServerUrl&lt;/code&gt; as the method parameter.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/110_ConnStringSetExpression1.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, upload the updated report back into the SharePoint list hosting our report files. If you already have a report with the same name and with a shared data source linked to it, our connection details would be overwritten. In order to avoid this, delete the report in the list and re-upload our new one. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, edit the Report Data Source by selecting the &lt;code&gt;Manage Data Sources&lt;/code&gt; menu item in the context menu. Ensure that connection type is set to &lt;code&gt;Custom data source&lt;/code&gt; and connection string to &lt;code&gt;Use connection string expression defined in the report&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/130_ManageDataSource.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ObfuscateSSRS/120_ConnStringNotInitialized.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the credentials, I will be using stored credentials. Note that the &lt;code&gt;Test Connection&lt;/code&gt; button does not work if the connection string needs to be evaluated at runtime.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can find the &lt;a href="https://github.com/shanec-/Nullfactory.SSRSExtensions"&gt;source here&lt;/a&gt;. It is meant only to be a template and should be extended to work with your own requirements.&lt;/li&gt;
&lt;li&gt;Since the custom assembly needs to be deployed into the Global Assembly Cache, I suggest including it as &lt;a href="https://msdn.microsoft.com/en-us/library/ee231595.aspx"&gt;part of the SharePoint Solution Package&lt;/a&gt; when automating your deployment process. &lt;/li&gt;
&lt;li&gt;Although this implementation was tested with a Microsoft SQL Server data source type, I suspect it can be altered to work with different connection types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would finally like to highlight the following articles as they gave me a lot of insight into Code Access Security (CAS) and better understanding of the security requirements I needed to address:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.simple-talk.com/dotnet/.net-framework/code-access-security-in-asp.net-4.0/"&gt;Simple-Talk - Code Access Security in ASP.NET 4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simple-talk.com/dotnet/.net-framework/whats-new-in-code-access-security-in-.net-framework-4.0---part-i/"&gt;Simple-Talk - What's New in Code Access Security in .NET Framework 4.0 - Part I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simple-talk.com/dotnet/.net-framework/whats-new-in-code-access-security-in-.net-framework-4.0---part-2/"&gt;Simple-Talk - What's New in Code Access Security in .NET Framework 4.0 - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://technet.microsoft.com/en-us/library/bb326290%28v=sql.105%29.aspx"&gt;Technet - Features Supported by Reporting Services in SharePoint Integrated Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://social.msdn.microsoft.com/Forums/sqlserver/en-US/d4588e88-5cb9-47cf-817b-a69942c507ac/how-to-use-microsoftsharepointdll-api-in-custom-assembly-of-ssrs-report?forum=sqlreportingservices"&gt;MSDN Forums - How to use "Microsoft.SharePoint.dll" API in custom assembly of SSRS report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms154658.aspx"&gt;MSDN - Code Access Security in Reporting Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms153561.aspx"&gt;MSDN - Using Custom Assemblies with Reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms154645.aspx"&gt;MSDN - Referencing Assemblies in an RDL File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms155034.aspx"&gt;MSDN - Deploying a Custom Assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms153587.aspx"&gt;MSDN - Asserting Permissions in Custom Assemblies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms154507.aspx"&gt;MSDN - Accessing Custom Assemblies Through Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ms153693.aspx"&gt;MSDN - How to: Debug Custom Assemblies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simple-talk.com/dotnet/.net-framework/code-access-security-in-asp.net-4.0/"&gt;Simple-Talk - Code Access Security in ASP.NET 4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simple-talk.com/dotnet/.net-framework/whats-new-in-code-access-security-in-.net-framework-4.0---part-i/"&gt;Simple-Talk - What's New in Code Access Security in .NET Framework 4.0 - Part I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simple-talk.com/dotnet/.net-framework/whats-new-in-code-access-security-in-.net-framework-4.0---part-2/"&gt;Simple-Talk - What's New in Code Access Security in .NET Framework 4.0 - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/office/dn268593.aspx"&gt;MSDN - Deciding between apps for SharePoint and SharePoint solution - Partial-trust user code is deprecated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/ee231595.aspx"&gt;MSDN - How to: Add and Remove Additional Assemblies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/02/tfs-customizie-build-template-to-exclude-symbols/</guid><link>http://nullfactory.net/2015/02/tfs-customizie-build-template-to-exclude-symbols/</link><title>Customize a Build Template to Exclude Symbols From Being Published to the Symbol Server</title><description>&lt;p&gt;This post was inspired by a feedback provided by one of the commenters on &lt;a href="http://www.edsquared.com/2011/02/12/Source+Server+And+Symbol+Server+Support+In+TFS+2010.aspx"&gt;this post&lt;/a&gt;. The requirement was to exclude certain third party symbols from being published to the symbol server. I thought I would take upon the challenge to implement this.&lt;/p&gt;

&lt;p&gt;As suggested in the same comment thread, my approach would revolve around explicitly setting the &lt;code&gt;FileList&lt;/code&gt; property in the &lt;code&gt;PublishSymbols&lt;/code&gt; activity. I would set it to a list that includes only the symbols that I want published. And the symbols I want to be excluded would be handled through a wild card filter that is passed as a build template parameter.&lt;/p&gt;

&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A properly configured symbol server. Check out my previous on &lt;a href="http://nullfactory.net/2015/01/setting-up-tfs-source-symbol-servers/"&gt;automatically publishing debug symbols&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Customization Steps&lt;/h2&gt;

&lt;p&gt;My template is based on the default TFS template &lt;code&gt;TfvcTemplate.12.xaml&lt;/code&gt; and customized with the following changes:&lt;/p&gt;

</description><pubDate>Sun, 08 Feb 2015 18:30:00 Z</pubDate><a10:updated>2015-02-08T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;This post was inspired by a feedback provided by one of the commenters on &lt;a href="http://www.edsquared.com/2011/02/12/Source+Server+And+Symbol+Server+Support+In+TFS+2010.aspx"&gt;this post&lt;/a&gt;. The requirement was to exclude certain third party symbols from being published to the symbol server. I thought I would take upon the challenge to implement this.&lt;/p&gt;

&lt;p&gt;As suggested in the same comment thread, my approach would revolve around explicitly setting the &lt;code&gt;FileList&lt;/code&gt; property in the &lt;code&gt;PublishSymbols&lt;/code&gt; activity. I would set it to a list that includes only the symbols that I want published. And the symbols I want to be excluded would be handled through a wild card filter that is passed as a build template parameter.&lt;/p&gt;

&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A properly configured symbol server. Check out my previous on &lt;a href="http://nullfactory.net/2015/01/setting-up-tfs-source-symbol-servers/"&gt;automatically publishing debug symbols&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Customization Steps&lt;/h2&gt;

&lt;p&gt;My template is based on the default TFS template &lt;code&gt;TfvcTemplate.12.xaml&lt;/code&gt; and customized with the following changes:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start off by adding the build template parameter that accepts filter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ExclusionFilter&lt;/code&gt; - &lt;em&gt;Text that would be used as part of the wild card filter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/10_Parameters.png" alt="Build Process Parameter" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, the variables that would be needed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CustomAllSymbolsList&lt;/code&gt; - &lt;em&gt;Temporarily store the symbol files that are found&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CustomExcludedSymbolsList&lt;/code&gt; - &lt;em&gt;Temporarily store the symbols that need to be excluded.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CustomFilteredSymbolsList&lt;/code&gt; - &lt;em&gt;The final list of symbols that would be published to the symbol server.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;CustomBinDirectory&lt;/code&gt; - &lt;em&gt;Temporary store the Binaries Directory path.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/20_Variables.png" alt="Build Process Variables" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now get the &lt;code&gt;WellKnowEnvironmentalVariables.BinariesDirectory&lt;/code&gt; value using the &lt;code&gt;GetEnvironmentalVariable&amp;lt;T&amp;gt;&lt;/code&gt; activity.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/40_EnvronmentalVariableActivity.png" alt="GetEnvironmentalVariable&lt;T&gt;" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/30_EnvironmentalVariable.png" alt="Built-In Environmental Variable" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get a list of all the available symbols from the build folder.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is done using a &lt;code&gt;FindMatchingFiles&lt;/code&gt; activity with a &lt;code&gt;String.Format("{0}\**\*.pdb", CustomBinDirectory)&lt;/code&gt; pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/45_FindAllSymbols.png" alt="Find All Symbols" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get a list of of symbols that need to be excluded from the Symbol Server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Again, a &lt;code&gt;FindMatchingFiles&lt;/code&gt; activity with &lt;code&gt;String.Format("{0}\**\*{1}*.pdb", CustomBinDirectory, ExclusionFilter)&lt;/code&gt; pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/47_FindSymbolsToExclude.png" alt="Find Symbols to be excluded" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since the &lt;code&gt;FindMatchingFiles&lt;/code&gt; activity returns an &lt;code&gt;IEnumberable&amp;lt;string&amp;gt;&lt;/code&gt; we create a new list that we can actually manipulate.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/50_InitializeSymbolList.png" alt="Find Symbols to be excluded" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add all the symbols to the new list.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/60_AddToCollection.png" alt="Add symbols" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the symbols that need to be excluded. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/70_RemoveFromCollection.png" alt="Remove symbols" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pass the filtered collection into the &lt;code&gt;PublishSymbols&lt;/code&gt; activity via the &lt;code&gt;FileList&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/80_PublishSymbols.png" alt="PublishSymbols Activity" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/90_FilteredPublishSymbols.png" alt="PublishSymbols, FileList" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Using the Build Definition&lt;/h2&gt;

&lt;p&gt;Create a new build definition using the new template and provide valid values for &lt;code&gt;Path to publish symbols&lt;/code&gt;and &lt;code&gt;ExclusionFilter&lt;/code&gt; parameters. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ExcludeSymbols/100_EditBuildDefinition.png" alt="Edit build definition" /&gt;&lt;/p&gt;

&lt;p&gt;Finally, queue a new build and verify that the symbols are excluded the symbols store. &lt;/p&gt;

&lt;p&gt;The final customized template can be &lt;a href="https://github.com/shanec-/Nullfactory.TfsBuildExtensions/blob/master/src/Template/ExcludedSymbolsTfvcTemplate.12.xaml"&gt;downloaded here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh190722.aspx"&gt;MSDN - Index and publish symbol data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/gg265783.aspx#Activity_IndexSources"&gt;MSDN - Embed version control paths and versions into the symbol data in Your PDB files (IndexSources activity)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/gg265783.aspx#Activity_PublishSymbols"&gt;MSDN - Publish symbols to a SymStore symbol store (PublishSymbols activity)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ewaldhofman.nl/post/2010/04/27/Customize-Team-Build-2010-e28093-Part-2-Add-arguments-and-variables.aspx"&gt;Ewald Hofman | Customize Team Build 2010 – Part 2: Add arguments and variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/dd647551.aspx"&gt;MSDN- Customize your build process template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-gb/library/hh850448.aspx"&gt;MSDN - Team Foundation Build environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/dn231755.aspx"&gt;MSDN - GetEnvironmentVariable&lt;T&gt; Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.build.activities.extensions.wellknownenvironmentvariables.binariesdirectory.aspx"&gt;MSDN - WellKnownEnvironmentVariables.BinariesDirectory Field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/01/tfstip-disable-windows-update-prior-upgrade/</guid><link>http://nullfactory.net/2015/01/tfstip-disable-windows-update-prior-upgrade/</link><title>TFS Tip: Disable Windows Update Prior TFS Upgrade</title><description>&lt;p&gt;Always make sure to disable the windows update services before starting any significant software upgrade. We found out the hard way that process such as a long running database backup does not handle kindly to spontaneous server restarts.&lt;/p&gt;

&lt;p&gt;Its one of those thing that can easily slip through the cracks but have a large impact in your deployment. So always make sure to add this to part of your per-requisite checklist.&lt;/p&gt;

&lt;p&gt;Personally I use the &lt;code&gt;net stop "windows update"&lt;/code&gt; command as it is only effective until you restart the computer/service.&lt;/p&gt;

</description><pubDate>Sat, 10 Jan 2015 18:30:00 Z</pubDate><a10:updated>2015-01-10T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;Always make sure to disable the windows update services before starting any significant software upgrade. We found out the hard way that process such as a long running database backup does not handle kindly to spontaneous server restarts.&lt;/p&gt;

&lt;p&gt;Its one of those thing that can easily slip through the cracks but have a large impact in your deployment. So always make sure to add this to part of your per-requisite checklist.&lt;/p&gt;

&lt;p&gt;Personally I use the &lt;code&gt;net stop "windows update"&lt;/code&gt; command as it is only effective until you restart the computer/service.&lt;/p&gt;

&lt;!--excerpt--&gt; 

&lt;p&gt;Here are some ways to achieve the same: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/603315/how-do-i-stop-the-windows-8-restart-clock-15-minutes-and-counting"&gt;http://superuser.com/questions/603315/how-do-i-stop-the-windows-8-restart-clock-15-minutes-and-counting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wikihow.com/Disable-Automatic-Reboot-After-Windows-Update"&gt;http://www.wikihow.com/Disable-Automatic-Reboot-After-Windows-Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/603315/how-do-i-stop-the-windows-8-restart-clock-15-minutes-and-counting"&gt;Super User - shutdown - How do I stop the Windows 8 restart clock; '15 minutes' and counting...?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wikihow.com/Disable-Automatic-Reboot-After-Windows-Update"&gt;WikiHow - 3 Ways to Disable Automatic Reboot After Windows Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/01/tfs-scheduled-backups-not-working-quiesced/</guid><link>http://nullfactory.net/2015/01/tfs-scheduled-backups-not-working-quiesced/</link><title>TFS Tip: Scheduled Backups Do Not Work While the Service Is Quiesced</title><description>&lt;p&gt;Last month I worked on upgrading a Team Foundation Server from 2012.2 to 2013.4. While majority of the process was based on the off of the &lt;a href="http://vsarupgradeguide.codeplex.com/"&gt;ALM Rangers upgrade guide&lt;/a&gt;, there were a few interesting tidbits that we learned during the upgrade.  &lt;/p&gt;

&lt;p&gt;The most important one was that Scheduled Backups feature no longer works if the services are stopped using the &lt;code&gt;TFSServiceControl quiesce&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;While the &lt;a href="http://msdn.microsoft.com/en-us/library/ff470382.aspx"&gt;MSDN Article&lt;/a&gt; for the command does state that it would take down all the services, it also says that you would normally use this command in order to facilitate backups. 
As such we assumed, incorrectly, that it would not apply to the scheduled backup service. &lt;/p&gt;

</description><pubDate>Fri, 09 Jan 2015 18:30:00 Z</pubDate><a10:updated>2015-01-09T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;Last month I worked on upgrading a Team Foundation Server from 2012.2 to 2013.4. While majority of the process was based on the off of the &lt;a href="http://vsarupgradeguide.codeplex.com/"&gt;ALM Rangers upgrade guide&lt;/a&gt;, there were a few interesting tidbits that we learned during the upgrade.  &lt;/p&gt;

&lt;p&gt;The most important one was that Scheduled Backups feature no longer works if the services are stopped using the &lt;code&gt;TFSServiceControl quiesce&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;While the &lt;a href="http://msdn.microsoft.com/en-us/library/ff470382.aspx"&gt;MSDN Article&lt;/a&gt; for the command does state that it would take down all the services, it also says that you would normally use this command in order to facilitate backups. 
As such we assumed, incorrectly, that it would not apply to the scheduled backup service. &lt;/p&gt;

&lt;!--excerpt--&gt; 

&lt;blockquote&gt;
  &lt;p&gt;The lesson learned here is that we should &lt;code&gt;quiesce&lt;/code&gt; the service only for manual backups of the databases. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One we figured this out, we manually took the backups and everything was alright in the world again. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms253151.aspx"&gt;MSDN - Understanding backing up Team Foundation Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/granth/archive/2013/02/13/tfs2012-what-are-all-the-different-jobs-built-in-to-tfs.aspx"&gt;Grant Holliday’s blog - TFS2012: What are all the different Jobs built-in to TFS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vsarupgradeguide.codeplex.com/"&gt;CodePlex - TFS Upgrade Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chamindac.blogspot.com/2014/12/tfs-backuprestore-lessons-learnt.html"&gt;Chaminda's Blog - TFS Backup/Restore – Lessons Learnt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/01/setting-up-tfs-source-symbol-servers/</guid><link>http://nullfactory.net/2015/01/setting-up-tfs-source-symbol-servers/</link><title>Setting up Source and Symbol Servers in Team Foundation Server</title><description>&lt;h2&gt;What are debug symbols?&lt;/h2&gt;

&lt;p&gt;Debug symbols are artifacts that a debugger can use in order to better debug an application. Within the.NET ecosystem these are managed through PDB files. The PDB files contain information about the source file name, line numbers as well as local variable names.&lt;/p&gt;

&lt;p&gt;As a software solution evolves, it is likely that multiple versions of it gets deployed into different production systems. And once the software is out in the wild, it becomes important that the developers can react to issues discovered by debugging specific versions. In order to do this effectively, it is important that the debug symbols themselves be treated as an first class artifact of the build and that it is readily accessible. Team Foundation Server (TFS) achieves this via a Source Server and Symbol Server.&lt;/p&gt;

&lt;h2&gt;The Source Server and Symbol Server&lt;/h2&gt;

&lt;p&gt;A Source Server component is essentially letting TFS know that we would be retrieving specific versions of source files and that it should be indexed. And a Symbol Server is a fancy name for a networked file share location containing the multiple versions of symbols &lt;a href="http://blogs.msdn.com/b/jimlamb/archive/2009/06/15/symbol-and-source-server-in-tfs-2010.aspx"&gt;[read more]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A TFS build definition will be configured in order to automatically index sources and publish symbols &lt;a href="http://blogs.msdn.com/b/adamroot/archive/2009/06/17/source-server-and-symbol-server-features-in-team-foundation-server-2010-beta-1.aspx"&gt;[read more]&lt;/a&gt;.&lt;/p&gt;

</description><pubDate>Wed, 31 Dec 2014 18:30:00 Z</pubDate><a10:updated>2014-12-31T18:30:00Z</a10:updated><a10:content type="html">&lt;h2&gt;What are debug symbols?&lt;/h2&gt;

&lt;p&gt;Debug symbols are artifacts that a debugger can use in order to better debug an application. Within the.NET ecosystem these are managed through PDB files. The PDB files contain information about the source file name, line numbers as well as local variable names.&lt;/p&gt;

&lt;p&gt;As a software solution evolves, it is likely that multiple versions of it gets deployed into different production systems. And once the software is out in the wild, it becomes important that the developers can react to issues discovered by debugging specific versions. In order to do this effectively, it is important that the debug symbols themselves be treated as an first class artifact of the build and that it is readily accessible. Team Foundation Server (TFS) achieves this via a Source Server and Symbol Server.&lt;/p&gt;

&lt;h2&gt;The Source Server and Symbol Server&lt;/h2&gt;

&lt;p&gt;A Source Server component is essentially letting TFS know that we would be retrieving specific versions of source files and that it should be indexed. And a Symbol Server is a fancy name for a networked file share location containing the multiple versions of symbols &lt;a href="http://blogs.msdn.com/b/jimlamb/archive/2009/06/15/symbol-and-source-server-in-tfs-2010.aspx"&gt;[read more]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A TFS build definition will be configured in order to automatically index sources and publish symbols &lt;a href="http://blogs.msdn.com/b/adamroot/archive/2009/06/17/source-server-and-symbol-server-features-in-team-foundation-server-2010-beta-1.aspx"&gt;[read more]&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;There are two components that need to be configured for an effective workflow. The build definition; this would be instructing TFS to index the sources and publish the symbols to a share location. Then instruct each of the clients (Visual Studio in this case) to use the symbol cache.&lt;/p&gt;

&lt;h3&gt;Build Definition (Server)&lt;/h3&gt;

&lt;p&gt;Configuring the build definition is pretty straight forward:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup a file share on a server other than the build agent. This server should be able to be accessed from the build agent as well as any clients that would be debugging the code.&lt;/li&gt;
&lt;li&gt;Grant build service account write access permission to the folder.  &lt;/li&gt;
&lt;li&gt;Grant all project contributors read access to this folder.&lt;/li&gt;
&lt;li&gt;Edit the build definition by providing a value to the &lt;code&gt;Publish Symbols &amp;gt; Path to publish symbols&lt;/code&gt; property. Set it to the previously created network folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/SetupSymbolServer/1_PathToPublishSymbols.png" alt="Setup the Build Definition" /&gt;&lt;/p&gt;

&lt;h3&gt;Clients&lt;/h3&gt;

&lt;p&gt;Now that the server is setup, we configure visual studio to take advantage of the symbol store:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up Visual Studio and navigate to &lt;code&gt;Tools &amp;gt; Options &amp;gt; Debugging&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Under the &lt;code&gt;General&lt;/code&gt; section, check the &lt;code&gt;Enable source server support&lt;/code&gt; flag.
&lt;img src="http://nullfactory.net/images/posts/SetupSymbolServer/2_VsEnableSourceServerSupport.png" alt="Enable Source Server Support" /&gt;&lt;/li&gt;
&lt;li&gt;Next, navigate to &lt;code&gt;Symbols&lt;/code&gt; node.&lt;/li&gt;
&lt;li&gt;Create a new symbol file location entry and set the cache directory to the previously created share location.
&lt;img src="http://nullfactory.net/images/posts/SetupSymbolServer/3_VsSetupSymbolCache.png" alt="Setup the Symbol Cache" /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The debug symbols would automatically be published to the share location every time a new build is triggered. The Visual Studio clients should be able to use the appropriate symbols when debugging.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.edsquared.com/2011/02/12/Source+Server+And+Symbol+Server+Support+In+TFS+2010.aspx"&gt;Source Server and Symbol Server Support in TFS 2010 - Ed Squared&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/adamroot/archive/2009/06/17/source-server-and-symbol-server-features-in-team-foundation-server-2010-beta-1.aspx"&gt;MSDN Blogs - Source Server and Symbol Server Features in Team Foundation Server 2010 - Anything's Possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/jimlamb/archive/2009/06/15/symbol-and-source-server-in-tfs-2010.aspx"&gt;MSDN Blogs - Enabling Symbol and Source Server Support in TFS Build 2010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/buckh/archive/2011/04/11/making-debugging-easier-source-indexing-and-symbol-server.aspx"&gt;MSDN Blogs - Making debugging easier: Source Indexing and Symbol Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2014/12/tfs-enable-reporting-warehouse-analysis-services/</guid><link>http://nullfactory.net/2014/12/tfs-enable-reporting-warehouse-analysis-services/</link><title>TFS 2013 - Enabling Reporting, Warehouse and Analysis Services</title><description>&lt;p&gt;Suppose you already have an Team Foundation Server (TFS) environment where you have opted-out from configuring the Reporting Services and Analysis Services during the installation. The following steps would help you to configure the warehouse and reporting functionality.&lt;/p&gt;

&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure that the SQL Server client tools are installed on the Application Tier.&lt;/p&gt;

&lt;p&gt;If this is not already done, you would most likely receive a &lt;code&gt;TF400465&lt;/code&gt; error when attempting to edit the configuration. &lt;code&gt;TF400465&lt;/code&gt; states that client tool are needed to be installed on the application tier in order for the analysis services to function properly.&lt;/p&gt;

&lt;p&gt;This can be fixed by re-running the SQL Server setup and adding the &lt;code&gt;Client Tools Connectivity&lt;/code&gt; feature &lt;a href="http://msdn.microsoft.com/en-us/library/dd578652.aspx"&gt;[Read More]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed, make sure to restart the TFS administration console.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that &lt;code&gt;Management Tools - Complete&lt;/code&gt; is installed on at least one of the servers in your topology. This is because SQL Server Management Studio requires the complete version installed in order to manage Analysis Services. This step optional but makes it easy for troubleshooting or future maintenance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Ensure that the Analysis Services have been installed and is up and running.&lt;/li&gt;
&lt;li&gt;Ensure SQL Server Reporting Services is installed and configured in native mode &lt;a href="http://msdn.microsoft.com/en-us/library/aa545752%28v=cs.70%29.aspx"&gt;[Read More]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This goes without saying, Analysis Services and Reporting Services are not available on the express version of SQL Server.&lt;/li&gt;
&lt;/ol&gt;

</description><pubDate>Fri, 26 Dec 2014 18:30:00 Z</pubDate><a10:updated>2014-12-26T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;Suppose you already have an Team Foundation Server (TFS) environment where you have opted-out from configuring the Reporting Services and Analysis Services during the installation. The following steps would help you to configure the warehouse and reporting functionality.&lt;/p&gt;

&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure that the SQL Server client tools are installed on the Application Tier.&lt;/p&gt;

&lt;p&gt;If this is not already done, you would most likely receive a &lt;code&gt;TF400465&lt;/code&gt; error when attempting to edit the configuration. &lt;code&gt;TF400465&lt;/code&gt; states that client tool are needed to be installed on the application tier in order for the analysis services to function properly.&lt;/p&gt;

&lt;p&gt;This can be fixed by re-running the SQL Server setup and adding the &lt;code&gt;Client Tools Connectivity&lt;/code&gt; feature &lt;a href="http://msdn.microsoft.com/en-us/library/dd578652.aspx"&gt;[Read More]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed, make sure to restart the TFS administration console.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that &lt;code&gt;Management Tools - Complete&lt;/code&gt; is installed on at least one of the servers in your topology. This is because SQL Server Management Studio requires the complete version installed in order to manage Analysis Services. This step optional but makes it easy for troubleshooting or future maintenance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Ensure that the Analysis Services have been installed and is up and running.&lt;/li&gt;
&lt;li&gt;Ensure SQL Server Reporting Services is installed and configured in native mode &lt;a href="http://msdn.microsoft.com/en-us/library/aa545752%28v=cs.70%29.aspx"&gt;[Read More]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This goes without saying, Analysis Services and Reporting Services are not available on the express version of SQL Server.&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to TFS Administration Console &lt;code&gt;Application Tier &amp;gt; Reporting&lt;/code&gt;. Notice that the services are not configured.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TFSEnableReportingAnalysisServices/1_ConsoleUnconfigured.png" alt="" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;code&gt;Edit&lt;/code&gt; to edit the configuration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;Use Reporting&lt;/code&gt; check box to get started.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the warehouse house by first selecting the SQL server from the server list.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TFSEnableReportingAnalysisServices/2_WarehouseDetails.png" alt="" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, provide a name for the warehouse database; I gave it &lt;code&gt;Tfs_Warehouse&lt;/code&gt; as it is what the latest versions of TFS provides by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Test Connection&lt;/code&gt; to ensure the connectivity to the server.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switch over to the &lt;code&gt;Analysis Services&lt;/code&gt; tab and select the server for the analysis services from the server list.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TFSEnableReportingAnalysisServices/3_AnalysisDetails.png" alt="" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide the database name &lt;code&gt;Tfs_Analysis&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Provide the username and password for accessing the data sources.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Test Connection&lt;/code&gt; to ensure the connectivity to the server.&lt;/li&gt;
&lt;li&gt;Next select the &lt;code&gt;Reports&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the report server from the server list.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TFSEnableReportingAnalysisServices/4_ReportingDetails.png" alt="" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;Populate URLs&lt;/code&gt;. This would retrieve the Web Service and Report Manager urls. In case they are not populated automatically, provide the details manually.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Provide the username and password for accessing the data sources.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt; to save the settings.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;Start Jobs&lt;/code&gt; to activate the services.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TFSEnableReportingAnalysisServices/5_ConsoleConfigured.png" alt="" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The final step is to rebuild the warehouse. This would prepare the database by building the necessary schema and any pre-requisite operations. This can be achieved in one of the following ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Executing the &lt;code&gt;RebuildWarehouse&lt;/code&gt; command &lt;a href="http://msdn.microsoft.com/en-us/library/ee349264.aspx"&gt;[Read More]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Navigate to the &lt;code&gt;WarehouseControlService&lt;/code&gt; webservice and execute &lt;code&gt;ProcessAnalysisDatabase&lt;/code&gt; with &lt;code&gt;processingType&lt;/code&gt; of &lt;code&gt;Full&lt;/code&gt; &lt;a href="http://msdn.microsoft.com/en-us/library/ff400237.aspx"&gt;[Read More]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open up the TFS Administration Console and navigate to &lt;code&gt;Application Tier &amp;gt; Reporting &amp;gt; Start Rebuild&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TFSEnableReportingAnalysisServices/6_RebuildConfirmation.png" alt="" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Verification&lt;/h2&gt;

&lt;p&gt;Once the &lt;code&gt;RebuildWarehouse&lt;/code&gt; command has been executed, verify that the warehouse jobs are running. This can be done by logging onto the application tier and then navigating to the &lt;code&gt;WarehouseControlWebService&lt;/code&gt; using the following url and executing the &lt;code&gt;GetProcessingStatus&lt;/code&gt; action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://localhost:8080/tfs/TeamFoundation/Administration/v3.0/WarehouseControlService.asmx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would return a list of all the jobs that are being executed on the server. The first time I viewed the results, I was a bit overwhelmed by the number of errors shown. If you take a moment and study the errors you realize that these are warnings about SQL locks. Given enough time, and depending on the size of the Project Collections, the errors (warnings) should resolve themselves. As far as I can tell these warnings are expected in a full rebuild.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/aa545752%28v=cs.70%29.aspx"&gt;MSDN - How to Configure Reporting Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/dd578652.aspx"&gt;MSDN - Manually install SQL Server for Team Foundation Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ee349264.aspx"&gt;MSDN - RebuildWarehouse Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ff400237.aspx"&gt;MSDN - Manually process the data warehouse and analysis services cube for Team Foundation Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2014/12/tfs-list-of-files-changed-between-changesets/</guid><link>http://nullfactory.net/2014/12/tfs-list-of-files-changed-between-changesets/</link><title>Get a list of files changed between changesets in Visual Studio Online using PowerShell</title><description>&lt;p&gt;So recently I had the requirement of getting a list of files that changed between two different releases. We wanted to use this list to act as a verification to ensure that all artifacts were included in a release package.&lt;/p&gt;

&lt;p&gt;I modified the code posted &lt;a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/f1a00836-cef3-419b-b768-3d1b6fa2b7bc/identifying-all-vb-files-changed-between-two-changesets?forum=tfsversioncontrol"&gt;here&lt;/a&gt; in order to quickly write a console application to do the task. With the immediate problem solved, my colleges and I bounced the idea about porting the code into a PowerShell script which would allow us to enhance it better in the long run.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;The solution would be built around the Visual Studio Online(VSO) REST service. This reduces any dependency on Team Foundation Server(TFS) specific client side assemblies or tools. The limitation is that, at the moment, it is only supported in Visual Studio Online and not all features are supported.&lt;/p&gt;

</description><pubDate>Sat, 13 Dec 2014 18:30:00 Z</pubDate><a10:updated>2014-12-13T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;So recently I had the requirement of getting a list of files that changed between two different releases. We wanted to use this list to act as a verification to ensure that all artifacts were included in a release package.&lt;/p&gt;

&lt;p&gt;I modified the code posted &lt;a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/f1a00836-cef3-419b-b768-3d1b6fa2b7bc/identifying-all-vb-files-changed-between-two-changesets?forum=tfsversioncontrol"&gt;here&lt;/a&gt; in order to quickly write a console application to do the task. With the immediate problem solved, my colleges and I bounced the idea about porting the code into a PowerShell script which would allow us to enhance it better in the long run.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;The solution would be built around the Visual Studio Online(VSO) REST service. This reduces any dependency on Team Foundation Server(TFS) specific client side assemblies or tools. The limitation is that, at the moment, it is only supported in Visual Studio Online and not all features are supported.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;h3&gt;Security and Credentials&lt;/h3&gt;

&lt;p&gt;In order make things simple, let's enable Alternate Authentication for access the account. This enables the script to use Basic Authentication when making request to the VSO REST service.
This can be done by navigating to the profile page, selecting &lt;code&gt;Credentials &amp;gt; Enable alternate credentials&lt;/code&gt; and providing new credential information. More instructions available &lt;a href="http://www.visualstudio.com/en-us/integrate/get-started/get-started-auth-introduction-vsi"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The credentials will be collected using the &lt;code&gt;Get-Credentials&lt;/code&gt; &lt;a href="http://technet.microsoft.com/en-us/library/hh849815.aspx"&gt;cmdlet&lt;/a&gt;. This provides the standard windows credentials dialog for the user to enter information. Since this makes the script interactive, I debated about having the username and password as a parameter for the script, but in the end decided against it. Maybe the next improvement would be to include a silent version of the script.&lt;/p&gt;

&lt;h3&gt;The REST call&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Invoke-RestMethod&lt;/code&gt; cmdlet will be used to make the actual call to the REST service. So what's the difference between &lt;code&gt;Invoke-WebRequest&lt;/code&gt; and &lt;code&gt;Invoke-RestMethod&lt;/code&gt; you may ask? While similar, the &lt;code&gt;Invoke-RestMethod&lt;/code&gt; attempts to parse the returned JSON so that we do not have to do it manually within our script. Think of it as a super set of &lt;code&gt;Invoke-WebRequest&lt;/code&gt; just like &lt;code&gt;Invoke-WebRequest&lt;/code&gt; is a superset of &lt;code&gt;System.Net.WebClient&lt;/code&gt;. Read more about it &lt;a href="http://jamesone111.wordpress.com/2014/06/09/screen-scraping-for-pleasure-or-profit-with-powershells-invoke-restmethod/"&gt;here&lt;/a&gt; and &lt;a href="http://blogs.technet.com/b/heyscriptingguy/archive/2013/10/21/invokerestmethod-for-the-rest-of-us.aspx"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I ran into strange issue when attempting to authenticate the request. The&lt;br /&gt;
&lt;code&gt;Get-Credentials&lt;/code&gt; cmdlet would return a &lt;code&gt;System.Management.Automation.PSCredential&lt;/code&gt; object as expected, but when passed into into the &lt;code&gt;Invoke-RestMethod&lt;/code&gt; cmdlet, it was not generating the the basic authentication header token within the request. I still haven't figured out why this happens, but the workaround was to add the authentication header explicitly as &lt;a href="http://stuartpreston.net/2014/05/accessing-visual-studio-online-rest-api-using-powershell-4-0-invoke-restmethod-and-alternate-credentials/"&gt;shown here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$basicAuth = ("{0}:{1}" -f $username,$password)
$basicAuth = [System.Text.Encoding]::UTF8.GetBytes($basicAuth)
$basicAuth = [System.Convert]::ToBase64String($basicAuth)
$headers = @{Authorization=("Basic {0}" -f $basicAuth)}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Making the call to the service&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First get a list of changesets related to the project within the timeframe that we're interested in.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://{account}.visualstudio.com/defaultcollection/_apis/tfvc/changesets?api-version=1.0&amp;amp;searchCriteria.fromId=100&amp;amp;searchCriteria.toId=200&amp;amp;searchCriteria.itemPath=$/{project}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It took me a while to figure it out but you should notice this call is only allowed to be made against the entire Team Project Collection. So in order to filter out the project, provide the project path via the &lt;code&gt;searchCriteria.itemPath&lt;/code&gt; filter. That is &lt;code&gt;searchCriteria.itemPath=$/{projectname}&lt;/code&gt; where &lt;code&gt;{projectname}&lt;/code&gt; is the one that you are interested in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next iterate through each of the results to retrieve the detailed information on of each of the changesets. This result would include a collection of all the files that were affected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://{account}.visualstudio.com/defaultcollection/_apis/tfvc/changesets/{changesetId}/changes?api-version=1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again, iterate through each of the changes and extract the &lt;code&gt;path&lt;/code&gt; property of the json result set. This is the path and name of the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Remove duplicates entries and folder creation entries as necessary.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;You can download my implementation &lt;a href="https://github.com/shanec-/powershell/blob/master/TFS/Get-FilesModifiedByChangeset.ps1"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next steps would make this to its own cmdlet in order to make it more reusable in other scripts.
Also check out the &lt;a href="https://curah.microsoft.com/276618/list"&gt;Curah! page&lt;/a&gt; that I created while working on this.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/f1a00836-cef3-419b-b768-3d1b6fa2b7bc/identifying-all-vb-files-changed-between-two-changesets?forum=tfsversioncontrol"&gt;Identifying all .vb files changed between two changesets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://technet.microsoft.com/en-us/library/hh849815.aspx"&gt;Microsoft Technet - Get-Credential&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jamesone111.wordpress.com/2014/06/09/screen-scraping-for-pleasure-or-profit-with-powershells-invoke-restmethod/"&gt;Screen scraping for pleasure or profit (with PowerShell’s Invoke-RestMethod)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.technet.com/b/heyscriptingguy/archive/2013/10/21/invokerestmethod-for-the-rest-of-us.aspx"&gt;Hey, Scripting Guy! - InvokeRestMethod for the Rest of Us&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://technet.microsoft.com/en-us/library/hh849971.aspx"&gt;Microsoft Technet - Invoke-RestMethod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stuartpreston.net/2014/05/accessing-visual-studio-online-rest-api-using-powershell-4-0-invoke-restmethod-and-alternate-credentials/"&gt;Accessing Visual Studio Online REST API using Powershell 4.0, Invoke-RestMethod and Alternate Credentials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item></channel></rss>