<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>nullfactory.net</title><link>http://nullfactory.net/rss.xml</link><description>nullfactory.net</description><item><guid isPermaLink="true">http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/</guid><link>http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/</link><title>Release Strategy for Dynamics CRM - Part 1 - Preparation</title><description>&lt;p&gt;Earlier this year I demonstrated the strategy I use for maintaining CRM solutions in source control. I favor the approach due to its ability to be used in team builds and automated releases. Since my original post, I have created a yeoman generator that allows to quickly scaffold the project structure for new projects. And now, in this series of posts, I will walk you through the steps in setting up a new project, creating a team build finally implementing a release strategy using Visual Studio Team Services. &lt;/p&gt;

&lt;p&gt;In order to automate the process we first need to make sure that the solution is maintained in source control. &lt;/p&gt;

&lt;h2&gt;Prerequistes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Team System (VSTS) source control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Yeoman&lt;/code&gt; code generator with the &lt;code&gt;generator-nullfactory-xrm&lt;/code&gt; installed globally. Installation instructions can be found &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While in this particular demo I use a VSTS team project running on top of Git source control along with VSTS Release Management for the deployment, the same steps can be adapted to be used with any other build and release system.&lt;/p&gt;

&lt;h2&gt;Prepping the Solution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a Team Project and select &lt;code&gt;Git&lt;/code&gt; as the version control.&lt;/li&gt;
&lt;li&gt;Clone a working copy onto a local machine. &lt;/li&gt;
&lt;li&gt;Create a .gitignore file that excludes build output - Let's use &lt;a href="https://github.com/github/gitignore/blob/master/VisualStudio.gitignore"&gt;GitHub's definitions for Visual Studio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;nullfactory-xrm&lt;/code&gt; yeoman generator in order to scaffold the project structure. More detailed instructions on running the generator can be found &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/10_YoGenerator.png" alt="nullfactory-xrm yo generator" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description><pubDate>Sat, 29 Oct 2016 13:00:00 Z</pubDate><a10:updated>2016-10-29T13:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Earlier this year I demonstrated the strategy I use for maintaining CRM solutions in source control. I favor the approach due to its ability to be used in team builds and automated releases. Since my original post, I have created a yeoman generator that allows to quickly scaffold the project structure for new projects. And now, in this series of posts, I will walk you through the steps in setting up a new project, creating a team build finally implementing a release strategy using Visual Studio Team Services. &lt;/p&gt;

&lt;p&gt;In order to automate the process we first need to make sure that the solution is maintained in source control. &lt;/p&gt;

&lt;h2&gt;Prerequistes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Team System (VSTS) source control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Yeoman&lt;/code&gt; code generator with the &lt;code&gt;generator-nullfactory-xrm&lt;/code&gt; installed globally. Installation instructions can be found &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While in this particular demo I use a VSTS team project running on top of Git source control along with VSTS Release Management for the deployment, the same steps can be adapted to be used with any other build and release system.&lt;/p&gt;

&lt;h2&gt;Prepping the Solution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a Team Project and select &lt;code&gt;Git&lt;/code&gt; as the version control.&lt;/li&gt;
&lt;li&gt;Clone a working copy onto a local machine. &lt;/li&gt;
&lt;li&gt;Create a .gitignore file that excludes build output - Let's use &lt;a href="https://github.com/github/gitignore/blob/master/VisualStudio.gitignore"&gt;GitHub's definitions for Visual Studio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;nullfactory-xrm&lt;/code&gt; yeoman generator in order to scaffold the project structure. More detailed instructions on running the generator can be found &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/10_YoGenerator.png" alt="nullfactory-xrm yo generator" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;  

&lt;ol&gt;
&lt;li&gt;Open up the generated solution in Visual Studio.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Force re-install the &lt;code&gt;Microsoft.CrmSdk.CoreTools&lt;/code&gt; package into the &lt;code&gt;Nullfactory.Xrm.Tooling&lt;/code&gt; project. Do this by running the following command in the Package Manager Console.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Update-Package -reinstall -project "Nullfactory.Xrm.Tooling"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/20_UpdatePackage.png" alt="Update-Package -reinstall" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, sign the the plugins and workflows projects with a new strong key. Use the following command to generate a new key pair.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sn -k key.snk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/30_SignAssembly.png" alt="Sign Assembly" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, let's sync up the CRM solution by running the synchronize script located in the &lt;code&gt;Scripts&lt;/code&gt; folder in the &lt;code&gt;Nullfactory.Xrm.Tooling&lt;/code&gt; project. This script downloads the CRM solution from the remote server and then expand it using the &lt;code&gt;SolutionPackager.exe&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.\Sync-CrmSolution.Param.ps1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/40_SyncScript.png" alt="Sync-CrmSolution" /&gt;&lt;/p&gt;

&lt;p&gt;If you encounter the following error when executing the script - it means that you have both PsGet and OneGet installed and its conflicting with each other. &lt;a href="https://til.secretgeek.net/powershell/psget_conflicts_with_PowerShellGet.html"&gt;Simply uninstalling PsGet in order to resolve the conflict&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/50_InstallModuleError.png" alt="Install-Module Error" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before proceeding any further, let's verify that the crm solution project can be built and solution zip file is the output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stage all the generated files into source control.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, let's force stage the &lt;code&gt;coretools&lt;/code&gt; folder. Due to the way the CoreTools package installs itself it is necessary to explicitly include these files into source control for the team build to work.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add --force Nullfactory.Xrm.Tooling/bin/coretools/*.*&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally commit the changes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "initial commit"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/50_InstallModuleError.png" alt="Install-Module Error" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the next post I will go into setting up a team build for this project.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://til.secretgeek.net/powershell/psget_conflicts_with_PowerShellGet.html"&gt;psget conflicts with PowerShellGet Â· Today I Learned (secretGeek)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/996417/what-is-install-module-command-in-powershell"&gt;StackOverflow - What is Install-Module command in Powershell? - Super User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/dd878350(v=vs.85).aspx"&gt;Installing a PowerShell Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;generator-nullfactory-xrm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2016/09/yeoman-generator-for-dynamics-crm-solutions/</guid><link>http://nullfactory.net/2016/09/yeoman-generator-for-dynamics-crm-solutions/</link><title>Yeoman Generator For Dynamics CRM Solutions</title><description>&lt;p&gt;I've previously experimented on creating a simplified way of &lt;a href="http://nullfactory.net/2016/01/crm-solution-tfs-microsoft-xrm-data-powershell/"&gt;maintaining CRM solutions in source control&lt;/a&gt;. While I was quite happy with the end result, the process of setting up the projects, scripts and post-build steps was a little bit tedious. &lt;/p&gt;

&lt;p&gt;This is where Yeoman code generator comes in. Yeoman is a very popular javascript based scaffolding engine that enables setting up new projects a breeze. I created my own custom generator that would help me to kick start new CRM solutions quickly. You can find the end product here: &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;https://www.npmjs.com/package/generator-nullfactory-xrm&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, install &lt;a href="http://yeoman.io"&gt;Yeoman&lt;/a&gt; and generator-nullfactory-xrm using &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g yo
npm install -g generator-nullfactory-xrm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then generate your new project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yo nullfactory-xrm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Execution&lt;/h2&gt;

&lt;p&gt;Template questions and their purpose:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visual Studio solution file name?  &lt;code&gt;The visual studio solution filename.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Visual Studio project prefix?  &lt;code&gt;The prefix for the projects generated. This can be an organization name or preferred convention.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM server url? &lt;code&gt;This is the source CRM server url. Example:[https://sndbx.crm6.dynamics.com](https://sndbx.crm6.dynamics.com)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Username? &lt;code&gt;The username used to connect to the source CRM server.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Password? &lt;code&gt;The password for the above account.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Solution Name? &lt;code&gt;The name of the CRM solution to be extracted.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add *.WebResource project? &lt;code&gt;Specifies if a new project should be created to manage the web resouces.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add *.Plugin project? &lt;code&gt;Specifies if a new plugin project should be created.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

</description><pubDate>Wed, 14 Sep 2016 14:00:00 Z</pubDate><a10:updated>2016-09-14T14:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I've previously experimented on creating a simplified way of &lt;a href="http://nullfactory.net/2016/01/crm-solution-tfs-microsoft-xrm-data-powershell/"&gt;maintaining CRM solutions in source control&lt;/a&gt;. While I was quite happy with the end result, the process of setting up the projects, scripts and post-build steps was a little bit tedious. &lt;/p&gt;

&lt;p&gt;This is where Yeoman code generator comes in. Yeoman is a very popular javascript based scaffolding engine that enables setting up new projects a breeze. I created my own custom generator that would help me to kick start new CRM solutions quickly. You can find the end product here: &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;https://www.npmjs.com/package/generator-nullfactory-xrm&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, install &lt;a href="http://yeoman.io"&gt;Yeoman&lt;/a&gt; and generator-nullfactory-xrm using &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g yo
npm install -g generator-nullfactory-xrm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then generate your new project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yo nullfactory-xrm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Execution&lt;/h2&gt;

&lt;p&gt;Template questions and their purpose:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visual Studio solution file name?  &lt;code&gt;The visual studio solution filename.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Visual Studio project prefix?  &lt;code&gt;The prefix for the projects generated. This can be an organization name or preferred convention.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM server url? &lt;code&gt;This is the source CRM server url. Example:[https://sndbx.crm6.dynamics.com](https://sndbx.crm6.dynamics.com)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Username? &lt;code&gt;The username used to connect to the source CRM server.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Password? &lt;code&gt;The password for the above account.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Solution Name? &lt;code&gt;The name of the CRM solution to be extracted.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add *.WebResource project? &lt;code&gt;Specifies if a new project should be created to manage the web resouces.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add *.Plugin project? &lt;code&gt;Specifies if a new plugin project should be created.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Post Installation Setup&lt;/h2&gt;

&lt;p&gt;Start off by updating the packages for the &lt;code&gt;Nullfactory.Xrm.Tooling&lt;/code&gt; project. Open up the &lt;code&gt;Package Manager Console&lt;/code&gt; in Visual Studio and execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Update-Package -reinstall -Project Nullfactory.Xrm.Tooling
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, install the &lt;a href="https://github.com/seanmcne/Microsoft.Xrm.Data.PowerShell"&gt;&lt;code&gt;Microsoft.Xrm.Data.PowerShell&lt;/code&gt;&lt;/a&gt; powershell module. On a Windows 10 or later, do this by executing the included powershell script &lt;code&gt;Nullfactory.Xrm.Tooling\_Install\Install-Microsoft.Xrm.Data.PowerShell.ps1&lt;/code&gt; or manually running the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Install-Module -Name Microsoft.Xrm.Data.PowerShell -Scope CurrentUser
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Syncing a Solution to the Project&lt;/h2&gt;

&lt;p&gt;Anytime the CRM solution needs to be synchronized back to the project, execute the script located at &lt;code&gt;Nullfactory.Xrm.Tooling\Scripts\Sync-CrmSolution.Param.ps1&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Resource Mapping&lt;/h3&gt;

&lt;p&gt;Edit the mapping file to map to the appropriate resource project. They are located in the &lt;code&gt;Nullfactory.Xrm.Tooling\Mapping&lt;/code&gt; folder. 
More information on the structure of the mapping file can be found &lt;a href="https://msdn.microsoft.com/en-us/library/jj602987.aspx#use_command"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Building the CRM Solution&lt;/h2&gt;

&lt;p&gt;The repackaging the extracted solution is integrated as a post-build step of the solution class library. Simply build it to output both a managed as well as unmanaged  CRM solution package. &lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I think I did pretty good for my first generator and hope to continue to evolve it as I learn more about the templating engine.&lt;/p&gt;

&lt;p&gt;Here are some ideas that I have floating around:
* The ability to add multiple CRM solutions in one go.
* The ability to rename the Plugin and WebResources Project
* Add new projects after the initial project structure has been generated.
* Refactor the script to better re-use components.&lt;/p&gt;

&lt;p&gt;The generator is &lt;a href="https://github.com/shanec-/generator-nullfactory-xrm"&gt;hosted in GitHub&lt;/a&gt;. Please feel free to fork and hack away at it. I would also appreciate any feedback you might have. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nullfactory.net/2016/01/crm-solution-tfs-microsoft-xrm-data-powershell/"&gt;Strategy for Maintaining CRM Solutions in Team Foundation Server using Microsoft.Xrm.Data.PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yeoman.io/authoring/"&gt;Writing Your Own Yeoman Generator | Yeoman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scotch.io/tutorials/create-a-custom-yeoman-generator-in-4-easy-steps"&gt;Create A Custom Yeoman Generator in 4 Easy Steps | Scotch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2016/07/unable-to-qualify-lead/</guid><link>http://nullfactory.net/2016/07/unable-to-qualify-lead/</link><title>Unable to Qualify Lead</title><description>&lt;p&gt;I was investigating an issue in a customized Dynamics CRM environment where the "Qualify" ribbon button on the Lead record had mysteriously stopped working. &lt;/p&gt;

&lt;p&gt;Qualification from the grid and the organization service API appeared to work as expected, and this only seemed limited to the ribbon button. Given that the page was not even posting back to the server on clicking the button, I suspected it was failing at the front end. I fired up the chrome developer tools and sure enough was greeted with the following error on the console:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/UnableToQualifyLead/10_error-message.png" alt="Developer Tools Error Message" /&gt;&lt;/p&gt;

</description><pubDate>Fri, 22 Jul 2016 14:00:00 Z</pubDate><a10:updated>2016-07-22T14:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I was investigating an issue in a customized Dynamics CRM environment where the "Qualify" ribbon button on the Lead record had mysteriously stopped working. &lt;/p&gt;

&lt;p&gt;Qualification from the grid and the organization service API appeared to work as expected, and this only seemed limited to the ribbon button. Given that the page was not even posting back to the server on clicking the button, I suspected it was failing at the front end. I fired up the chrome developer tools and sure enough was greeted with the following error on the console:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/UnableToQualifyLead/10_error-message.png" alt="Developer Tools Error Message" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I eventually found &lt;a href="https://community.dynamics.com/crm/f/117/t/156598"&gt;this forum post&lt;/a&gt; that gave me the solution. It turns out that the out of the box JavaScript appears dependent upon two fields having to exist on the form - the &lt;code&gt;companyname&lt;/code&gt; and &lt;code&gt;transactioncurrencyid&lt;/code&gt; fields. They don't necessarily have to visible on the form, but added somewhere on the form.&lt;/p&gt;

&lt;p&gt;This particular environment was running Dynamics CRM 2015 OnPremise with update &lt;code&gt;0.1&lt;/code&gt;. My attempts at trying to replicate the issue on a CRM Online 2016 instance (version &lt;code&gt;8.1.0.367&lt;/code&gt; at the time of writing) were unsuccessful. The qualification process worked fine even without the fields on the form. This leads me to believe that this dependency might have been removed post 0.1.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://community.dynamics.com/crm/f/117/t/156598"&gt;Unable to Qualify Leads After 2015 Upgrade - Microsoft Dynamics CRM Community Forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2016/04/checklist-enabling-quick-create-subgrid/</guid><link>http://nullfactory.net/2016/04/checklist-enabling-quick-create-subgrid/</link><title>Checklist for Enabling Quick Create from Sub-grid</title><description>&lt;p&gt;There have been a few instances where I've wanted to launch a quick create a record directly from a sub-grid add-button. That is, without having an extra step of bringing down the lookup view and then clicking the &lt;code&gt;+ New&lt;/code&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/QuickCreateSubGrid/10_ExpectedResult.png" alt="The expected result" /&gt;&lt;/p&gt;

&lt;p&gt;While the required steps are covered between these two great posts - &lt;a href="http://ledgeviewpartners.com/blog/manage-quick-create-forms-dynamics-crm/"&gt;here&lt;/a&gt; and &lt;a href="http://www.powerobjects.com/2015/03/10/open-quick-create-sub-grid/"&gt;here&lt;/a&gt;, I have summarized the checklist here for convenience.&lt;/p&gt;

</description><pubDate>Sat, 16 Apr 2016 14:00:00 Z</pubDate><a10:updated>2016-04-16T14:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;There have been a few instances where I've wanted to launch a quick create a record directly from a sub-grid add-button. That is, without having an extra step of bringing down the lookup view and then clicking the &lt;code&gt;+ New&lt;/code&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/QuickCreateSubGrid/10_ExpectedResult.png" alt="The expected result" /&gt;&lt;/p&gt;

&lt;p&gt;While the required steps are covered between these two great posts - &lt;a href="http://ledgeviewpartners.com/blog/manage-quick-create-forms-dynamics-crm/"&gt;here&lt;/a&gt; and &lt;a href="http://www.powerobjects.com/2015/03/10/open-quick-create-sub-grid/"&gt;here&lt;/a&gt;, I have summarized the checklist here for convenience.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;In order to get the CRM sub-grid to show the quick create dialog, ensure that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Allow quick create&lt;/code&gt; is enabled for the child entity.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/QuickCreateSubGrid/20_AllowQuickCreateOption.png" alt="Enable Quick Create" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A quick create form exists for the entity. If not, create a new one.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/QuickCreateSubGrid/30_EnsureQuickCreateForm.png" alt="Ensure Quick Create form exists" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that the related foreign key field is &lt;code&gt;Business Required&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/QuickCreateSubGrid/40_BusinessRequired.png" alt="Ensure foreign key is business required" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ledgeviewpartners.com/blog/manage-quick-create-forms-dynamics-crm/"&gt;How to Manage Quick Create Forms in Dynamics CRM - Ledgeview Partners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.powerobjects.com/2015/03/10/open-quick-create-sub-grid/"&gt;How to: Open Quick Create from a Sub Grid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2016/04/non-searchable-field-breaks-pre-filtering/</guid><link>http://nullfactory.net/2016/04/non-searchable-field-breaks-pre-filtering/</link><title>Non-searchable Primary Key Field Breaks Pre-filtering</title><description>&lt;p&gt;I recently implemented a custom FetchXml based SSRS report that was designed to be run against a filtered list of accounts. The accounts were to be determined by the user at the time of execution, hence the report was setup to use pre-filtering on the accounts entity.&lt;/p&gt;

&lt;p&gt;The report worked fine except in one environment where the user was greeted with the following warning message:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/PreFilterNonSearchable/10_FilteringError.png" alt="Filtering error" /&gt;&lt;/p&gt;

&lt;p&gt;Dismissing the warning opened up the &lt;code&gt;Report Filtering Criteria&lt;/code&gt; dialog with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There was an error in showing this condition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And additional information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The condition was referencing the field accountid. The field has been removed from the system or is not valid for advanced find.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/PreFilterNonSearchable/20_ReportFilteringCriteria.png" alt="Report filtering criteria" /&gt;&lt;/p&gt;

</description><pubDate>Fri, 15 Apr 2016 14:00:00 Z</pubDate><a10:updated>2016-04-15T14:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I recently implemented a custom FetchXml based SSRS report that was designed to be run against a filtered list of accounts. The accounts were to be determined by the user at the time of execution, hence the report was setup to use pre-filtering on the accounts entity.&lt;/p&gt;

&lt;p&gt;The report worked fine except in one environment where the user was greeted with the following warning message:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/PreFilterNonSearchable/10_FilteringError.png" alt="Filtering error" /&gt;&lt;/p&gt;

&lt;p&gt;Dismissing the warning opened up the &lt;code&gt;Report Filtering Criteria&lt;/code&gt; dialog with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There was an error in showing this condition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And additional information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The condition was referencing the field accountid. The field has been removed from the system or is not valid for advanced find.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/PreFilterNonSearchable/20_ReportFilteringCriteria.png" alt="Report filtering criteria" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;A quick bit of investigating revealed that this particular environment had the &lt;code&gt;Searchable&lt;/code&gt; property of the primary key, within the account entity, set to &lt;code&gt;No&lt;/code&gt;.
This meant that the &lt;code&gt;Account&lt;/code&gt; attribute would not appear on any advanced find dialogs, there by affecting the &lt;code&gt;Reporting Filtering Criteria&lt;/code&gt; dialog. Re-enabling this got the report working as expected.&lt;/p&gt;

&lt;h2&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/dynamics/crm-customer-center/create-or-edit-entity-fields.aspx"&gt;Create or edit entity fields | Microsoft Dynamics CRM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2016/04/dynamics-crm-base64-attachment-size/</guid><link>http://nullfactory.net/2016/04/dynamics-crm-base64-attachment-size/</link><title>Base64 and Maximum Attachment Size in Dynamics CRM</title><description>&lt;p&gt;Microsoft Dynamics CRM provides out-of-the-box functionality to store and associate small file attachments against an entity record. This is achieved via the &lt;code&gt;annotation&lt;/code&gt; entity - it is similar to any other entity except that it stores meta data as well as the &lt;a href="https://msdn.microsoft.com/en-us/library/gg334398.aspx"&gt;actual content of the file attachment&lt;/a&gt; within it. &lt;/p&gt;

&lt;p&gt;As CRM is not designed to be a &lt;a href="http://www.optimalcrm.co.uk/storage-limit-reached-in-microsoft-dynamics-crm-online/"&gt;file store&lt;/a&gt;, it imposes some limitations on the size of attachments that can be uploaded. Recent versions of the product, including 2016, defaults this size to 5120Kb which can be adjusted to a &lt;a href="https://dynamicscrmherald.wordpress.com/2014/01/03/increasing-web-resource-and-email-note-attachment-file-size-in-microsoft-dynamics-crm-2013/"&gt;maximum hard limit of 32768Kb&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;However, there is one caveat with this limitation - CRM stores the byte stream in a base64 encoded format, this means that there would be an &lt;a href="http://stackoverflow.com/questions/4715415/base64-what-is-the-worst-possible-increase-in-space-usage"&gt;increase&lt;/a&gt; in the final saved file size. &lt;/p&gt;

</description><pubDate>Thu, 14 Apr 2016 14:00:00 Z</pubDate><a10:updated>2016-04-14T14:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Microsoft Dynamics CRM provides out-of-the-box functionality to store and associate small file attachments against an entity record. This is achieved via the &lt;code&gt;annotation&lt;/code&gt; entity - it is similar to any other entity except that it stores meta data as well as the &lt;a href="https://msdn.microsoft.com/en-us/library/gg334398.aspx"&gt;actual content of the file attachment&lt;/a&gt; within it. &lt;/p&gt;

&lt;p&gt;As CRM is not designed to be a &lt;a href="http://www.optimalcrm.co.uk/storage-limit-reached-in-microsoft-dynamics-crm-online/"&gt;file store&lt;/a&gt;, it imposes some limitations on the size of attachments that can be uploaded. Recent versions of the product, including 2016, defaults this size to 5120Kb which can be adjusted to a &lt;a href="https://dynamicscrmherald.wordpress.com/2014/01/03/increasing-web-resource-and-email-note-attachment-file-size-in-microsoft-dynamics-crm-2013/"&gt;maximum hard limit of 32768Kb&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;However, there is one caveat with this limitation - CRM stores the byte stream in a base64 encoded format, this means that there would be an &lt;a href="http://stackoverflow.com/questions/4715415/base64-what-is-the-worst-possible-increase-in-space-usage"&gt;increase&lt;/a&gt; in the final saved file size. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I recently learned that the upload restriction is done based on the encoded file size and not the original byte stream as I was expecting. I imagine this would be especially important to remember when designing integration components that create &lt;code&gt;annotation&lt;/code&gt; records.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/gg334398.aspx"&gt;MSDN - Annotation (note) entity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.optimalcrm.co.uk/storage-limit-reached-in-microsoft-dynamics-crm-online/"&gt;Storage Limit Reached in Microsoft Dynamics CRM Online&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dynamicscrmherald.wordpress.com/2014/01/03/increasing-web-resource-and-email-note-attachment-file-size-in-microsoft-dynamics-crm-2013/"&gt;Increasing Web Resource and Email / Note Attachment File Size in Microsoft Dynamics CRM 2013 | The Dynamics CRM Herald&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2016/01/crm-solution-tfs-microsoft-xrm-data-powershell/</guid><link>http://nullfactory.net/2016/01/crm-solution-tfs-microsoft-xrm-data-powershell/</link><title>Strategy for Maintaining CRM Solutions in Team Foundation Server using Microsoft.Xrm.Data.PowerShell</title><description>&lt;p&gt;I've come across a few strategies on the internet on achieving this goal, with each one having its pros and cons. This post describes my own attempt at setting up a development workflow that can be integrated with the team builds.&lt;/p&gt;

&lt;p&gt;This implementation at its core revolves around the &lt;a href="https://github.com/seanmcne/Microsoft.Xrm.Data.PowerShell"&gt;&lt;code&gt;Microsoft.Xrm.Data.PowerShell&lt;/code&gt;&lt;/a&gt; module and the &lt;code&gt;Solution Packager&lt;/code&gt; tool provided with the official SDK. I have minimized the use of 3rd party libraries and have intentionally excluded the use of any visual studio extensions or helper tools.&lt;/p&gt;

&lt;h2&gt;Setting up the Tools&lt;/h2&gt;

&lt;h3&gt;Installing Microsoft.CrmSdk.CoreTools&lt;/h3&gt;

&lt;p&gt;Let's start off by creating a "tooling" project that would act as a hosts for the tools and scripts involved in the process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a class library project to host the tools using for building the packages. I named mine &lt;code&gt;Nullfactory.Crm.Tooling&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;code&gt;Microsoft.CrmSdk.CoreTools&lt;/code&gt; nuget package by running the following command in the package manager console: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Install-Package Microsoft.CrmSdk.CoreTools -Project Nullfactory.Crm.Tooling&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This nuget package includes the &lt;code&gt;SolutionPackager.exe&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/10_InstallCoreTools.png" alt="Install Crm Core Tools" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, clean up the project by removing the default &lt;code&gt;Class1.cs&lt;/code&gt; file as well as the &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt; within the &lt;code&gt;bin&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the solution configurations to not build this project. Do this by navigating to the solution property pages &gt; &lt;code&gt;Configuration Properties&lt;/code&gt; and un-ticking the check box against the build column.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/20_DontBuild.png" alt="Do not Build Project" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description><pubDate>Wed, 20 Jan 2016 13:00:00 Z</pubDate><a10:updated>2016-01-20T13:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I've come across a few strategies on the internet on achieving this goal, with each one having its pros and cons. This post describes my own attempt at setting up a development workflow that can be integrated with the team builds.&lt;/p&gt;

&lt;p&gt;This implementation at its core revolves around the &lt;a href="https://github.com/seanmcne/Microsoft.Xrm.Data.PowerShell"&gt;&lt;code&gt;Microsoft.Xrm.Data.PowerShell&lt;/code&gt;&lt;/a&gt; module and the &lt;code&gt;Solution Packager&lt;/code&gt; tool provided with the official SDK. I have minimized the use of 3rd party libraries and have intentionally excluded the use of any visual studio extensions or helper tools.&lt;/p&gt;

&lt;h2&gt;Setting up the Tools&lt;/h2&gt;

&lt;h3&gt;Installing Microsoft.CrmSdk.CoreTools&lt;/h3&gt;

&lt;p&gt;Let's start off by creating a "tooling" project that would act as a hosts for the tools and scripts involved in the process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a class library project to host the tools using for building the packages. I named mine &lt;code&gt;Nullfactory.Crm.Tooling&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;code&gt;Microsoft.CrmSdk.CoreTools&lt;/code&gt; nuget package by running the following command in the package manager console: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Install-Package Microsoft.CrmSdk.CoreTools -Project Nullfactory.Crm.Tooling&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This nuget package includes the &lt;code&gt;SolutionPackager.exe&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/10_InstallCoreTools.png" alt="Install Crm Core Tools" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, clean up the project by removing the default &lt;code&gt;Class1.cs&lt;/code&gt; file as well as the &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt; within the &lt;code&gt;bin&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the solution configurations to not build this project. Do this by navigating to the solution property pages &gt; &lt;code&gt;Configuration Properties&lt;/code&gt; and un-ticking the check box against the build column.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/20_DontBuild.png" alt="Do not Build Project" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;

&lt;h3&gt;Install Microsoft.Xrm.Data.PowerShell&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Microsoft.Xrm.Data.Powershell&lt;/code&gt; module makes interacting with CRM so much easier - it is used to connect to CRM and export the solutions. &lt;/p&gt;

&lt;p&gt;Follow these steps to install it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the latest release from &lt;a href="https://github.com/seanmcne/Microsoft.Xrm.Data.PowerShell/releases/"&gt;here&lt;/a&gt;. Detailed installation instructions can be found on their github page. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that the zip file is unblocked &lt;em&gt;before extracting the contents&lt;/em&gt;. Once extracted, add them into the bin folder as part of the tooling project.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/30_UnblockZip.png" alt="Unblock Zip Before Extraction" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since this module would have to be installed on each of the developer machines, I created a helper script that automates it - &lt;code&gt;Install-Microsoft.Xrm.Data.Powershell.ps1&lt;/code&gt;. Add this as part of the project as well. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/40_InstallPowershell.png" alt="Install Microsoft.Xrm.Data.Powershell" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/shanec-/Crm-PowershellBuildDemo/blob/master/src/Nullfactory.Crm.Tooling/bin/Install-Microsoft.Xrm.Data.Powershell.ps1"&gt;Download the install script here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Setting up the Projects&lt;/h2&gt;

&lt;p&gt;Next, lets create class library projects for each of the CRM Solutions. This makes visualizing and managing the solution from within Visual Studio easier. And more importantly, give us the ability to add a msbuild tasks.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code&gt;csproj&lt;/code&gt; file of the newly created project and add the following ms build task. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Target Name="Build"&amp;gt;
    &amp;lt;Exec Command="$(SolutionDir)\Nullfactory.Crm.Tooling\bin\coretools\SolutionPackager.exe /action:pack /packagetype:both /folder:$(MSBuildProjectDirectory) /zipfile:$(OutDir)$(MSBuildProjectName).zip" /&amp;gt;
&amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ensures that both unmanaged and managed versions of the CRM solution is packaged anytime the project is built. &lt;/p&gt;

&lt;p&gt;Optionally, remove the &lt;code&gt;properties&lt;/code&gt; folder and &lt;code&gt;AssemblyInfo.cs&lt;/code&gt; file as they will not be required for these projects.&lt;/p&gt;

&lt;h3&gt;Add Solution Export and Synchronization Script&lt;/h3&gt;

&lt;p&gt;Add the &lt;code&gt;Sync-CrmSolution.ps1&lt;/code&gt; and &lt;code&gt;Sync-CrmSolution.Param.ps1&lt;/code&gt; files into the tooling project. These scripts can be downloaded &lt;a href="https://github.com/shanec-/Crm-PowershellBuildDemo/blob/master/src/Nullfactory.Crm.Tooling/bin/Sync-CrmSolution.ps1"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/shanec-/Crm-PowershellBuildDemo/blob/master/src/Nullfactory.Crm.Tooling/bin/Sync-CrmSolution.Param.ps1"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/60_SyncScriptsInstalled.png" alt="Installed Synchronization Scripts" /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Sync-CrmSolution.ps1&lt;/code&gt; script handles the exporting of the solution and performs the following actions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deletes all the artifacts from the CRM solution project folder.&lt;/li&gt;
&lt;li&gt;Connects to the organization and exports both the managed and un-managed versions of the solution.&lt;/li&gt;
&lt;li&gt;Finally, unpacks them into the previously emptied folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;Sync-CrmSolution.Param.ps1&lt;/code&gt; script acts as a controller script with the actual parameters. Each developer would update this script to point to their own development CRM organization.&lt;/p&gt;

&lt;h2&gt;Unpacking and Synchronizing&lt;/h2&gt;

&lt;p&gt;Next, we unpack the initial version of the solution into the project. This is done using the following steps: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure that the &lt;code&gt;Sync-CrmSolution.Param.ps1&lt;/code&gt; script is pointing to a valid CRM organization and solution and execute the script.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/50_ExtractingSolution.png" alt="Extracting Solution" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the solution has been unpacked, add the new artifacts into the project.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmDataPowershell/70_SolutionExtracted.png" alt="Crm Solution Extracted" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check-in all the changes done so far.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that the initial version is in source control, it raises the problem of figuring out the files that have changes in subsequent extractions. How do you figure out which files have changed so that only those files are check-in?&lt;/p&gt;

&lt;p&gt;One of my colleague introduced me to an interesting technique that hes been using for a while. I like it a lot as its simple, effective and avoids having to do any explicit TFS integration.   &lt;/p&gt;

&lt;p&gt;This method leverages Microsoft Visual Studio Team Foundation Server 2015 Power Tools in order to identify the files changed in the working folder. It requires each developer &lt;a href="https://visualstudiogallery.msdn.microsoft.com/898a828a-af00-42c6-bbb2-530dc7b8f2e1"&gt;install&lt;/a&gt; it on their development box.&lt;/p&gt;

&lt;p&gt;Whenever a developer synchronizes their version of the solution using the &lt;code&gt;Sync-CrmSolution.Param.ps1&lt;/code&gt; script, the power tools would automatically detect and check out the edited files. One would still have to manually include new and deleted files into the project via the detected changes dialog, but that's a minor inconvenience I can live with. &lt;/p&gt;

&lt;p&gt;A positive side effect of this method is that we no longer have to be concerned about the &lt;code&gt;allowDelete&lt;/code&gt; and &lt;code&gt;allowWrite&lt;/code&gt; parameters in the Solution Packager tool.&lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Now any time the class libraries hosting the solutions are built, the output would be packaged zip files for both managed and un-managed CRM solutions. &lt;/p&gt;

&lt;p&gt;Although I did not setup up separate projects for plugins and web resources in this example, it is certainly possible.  &lt;/p&gt;

&lt;p&gt;I might also explore converting the entire &lt;code&gt;Nullfactory.Crm.Tooling&lt;/code&gt; project into a template in a future post. It should make it a lot more easier integrate it into new projects.&lt;/p&gt;

&lt;p&gt;Finally, I feel that the day-to-day operation part of this process is a little bit tedious and does not offer any significant advantage over the convenience of using an Visual Studio extension. I knew this going in, but I wanted to have an understanding of the work involved in setting this up. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/seanmcne/Microsoft.Xrm.Data.PowerShell/releases/"&gt;Releases Â· seanmcne/Microsoft.Xrm.Data.PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/jj602987.aspx"&gt;Use the SolutionPackager tool to compress and extract a solution file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://technet.microsoft.com/en-us/library/dd878350(v=vs.85).aspx"&gt;Installing Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/koteshb/archive/2010/02/13/powershell-creating-a-pscredential-object.aspx"&gt;PowerShell - How to create a PSCredential object - Kotesh Bandhamravuri - Site Home - MSDN Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=65MVXzMAWyg"&gt;Integrating SolutionPackager into Visual Studio - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://waelhamze.com/2014/01/12/dynamics-crm-parallel-development-with-solution-packager/"&gt;Dynamics CRM Parallel Development with Solution Packager | Wael Hamze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudiogallery.msdn.microsoft.com/898a828a-af00-42c6-bbb2-530dc7b8f2e1"&gt;Microsoft Visual Studio Team Foundation Server 2015 Power Tools extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/12/disabling-recurring-ondemand-webjob/</guid><link>http://nullfactory.net/2015/12/disabling-recurring-ondemand-webjob/</link><title>Disabling Recurring and OnDemand Web Jobs within a Deployment Slot</title><description>&lt;p&gt;I've come to realize that things can get a bit tricky when working with slot deployments and webjobs. I learned &lt;em&gt;the hard way&lt;/em&gt; that stopping a slotted Web App does &lt;strong&gt;not&lt;/strong&gt; stop the web jobs it hosts. This means that I can't just stop all my website slots and expect the related jobs to automatically shutdown as well. Bummer. 
Okay, so I am thinking maybe I'll just disable the individual jobs for each of the slots? Not much luck on that front either as the Azure portal only provides a &lt;code&gt;stop&lt;/code&gt; option for &lt;code&gt;continuous&lt;/code&gt; jobs and not for the &lt;code&gt;recurring&lt;/code&gt; and &lt;code&gt;OnDemand&lt;/code&gt; jobs.&lt;/p&gt;

&lt;p&gt;This limits us to a few possible solutions:&lt;/p&gt;

</description><pubDate>Sat, 19 Dec 2015 13:00:00 Z</pubDate><a10:updated>2015-12-19T13:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I've come to realize that things can get a bit tricky when working with slot deployments and webjobs. I learned &lt;em&gt;the hard way&lt;/em&gt; that stopping a slotted Web App does &lt;strong&gt;not&lt;/strong&gt; stop the web jobs it hosts. This means that I can't just stop all my website slots and expect the related jobs to automatically shutdown as well. Bummer. 
Okay, so I am thinking maybe I'll just disable the individual jobs for each of the slots? Not much luck on that front either as the Azure portal only provides a &lt;code&gt;stop&lt;/code&gt; option for &lt;code&gt;continuous&lt;/code&gt; jobs and not for the &lt;code&gt;recurring&lt;/code&gt; and &lt;code&gt;OnDemand&lt;/code&gt; jobs.&lt;/p&gt;

&lt;p&gt;This limits us to a few possible solutions:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;ol&gt;
&lt;li&gt;Make sure that all the resources accessed by the slotted web app / jobs are isolated from each other - Ensure that the necessary appsettings are defined as slot settings and point to different values. This is done so as to ensure that you do not inadvertently run a scheduled job multiple times (once via the production slot and one time for each of the slots). &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Baking-in custom disabling logic right into your job - For example, a web job could skip its operation based on a custom appsetting value. Once again, this appsetting would be defined as a slot setting. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A word of caution - be weary when implementing the "skipping" logic on continous jobs as "skipping" can be considered a successful run which would in turn pop the last message in the tiggered queue.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The nuke option - entirely delete the web job entries in each of the slots (not recommended).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/11/strategy-updating-sql-server-schema-via-ssdt-delta-script/</guid><link>http://nullfactory.net/2015/11/strategy-updating-sql-server-schema-via-ssdt-delta-script/</link><title>Strategy for Updating a SQL Server Database Schema via SSDT Delta Script</title><description>&lt;p&gt;This posts talks about the high level steps I went through in order to get the SQL Server related components ready for automation in a project I worked on recently. &lt;/p&gt;

&lt;p&gt;This project uses SQL Server Data Tools (SSDT) project in order to maintain the database schema in source control. Its output - the Data-tier Application Component Packages (DACPAC) gets deployed into the appropriate target environment via a WebDeploy package. And considering that the solution was designed as an Entity Framework (EF) database first approach, code first migrations were not a viable upgrade strategy.&lt;/p&gt;

&lt;p&gt;Here are the steps I followed in order to bring the production environment up-to-date: &lt;/p&gt;

</description><pubDate>Tue, 24 Nov 2015 13:00:00 Z</pubDate><a10:updated>2015-11-24T13:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;This posts talks about the high level steps I went through in order to get the SQL Server related components ready for automation in a project I worked on recently. &lt;/p&gt;

&lt;p&gt;This project uses SQL Server Data Tools (SSDT) project in order to maintain the database schema in source control. Its output - the Data-tier Application Component Packages (DACPAC) gets deployed into the appropriate target environment via a WebDeploy package. And considering that the solution was designed as an Entity Framework (EF) database first approach, code first migrations were not a viable upgrade strategy.&lt;/p&gt;

&lt;p&gt;Here are the steps I followed in order to bring the production environment up-to-date: &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;ol&gt;
&lt;li&gt;Create a baseline DACPAC and move it into source control - this represents the schema currently in production.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, ensure that every time the SSDT project is built a post event would generate a differential delta script between the baseline and latest DACPAC. I tried to simplify the following command by wrapping it up within a powershell script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;"C:\Program Files (x86)\Microsoft SQL Server\110\DAC\bin\sqlpackage" /a:Script /sf:$SourceDacpac  /tf:$TargetDacpac /op:$OutputDeltaFile /tdn:$DBName /p:IncludeTransactionalScripts=True /p:IncludeCompositeObjects=True /p:ScriptDatabaseOptions=False /p:BlockOnPossibleDataLoss=True /v:TenantSchemaName=dbo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that one of the parameters (&lt;code&gt;p:IncludeTransactionalScripts=True&lt;/code&gt;) was to ensure that the script would be generated as a transaction.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(optional) Perform any post processing on the generated delta script - In my specific use-case I had to tinker the script to work within a multi-tenant scenario. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Deploy the generated delta script against the target environment. This can be done using a tools &lt;code&gt;SqlCmd&lt;/code&gt; or a custom tool such as &lt;a href="https://github.com/rusanu/DbUtilSqlCmd"&gt;https://github.com/rusanu/DbUtilSqlCmd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upon successful release, update the baseline to the latest DACPAC file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/22352298/sqlpackage-with-script-action-does-not-produce-any-copy-always-scripts"&gt;Stack Overflow - ssdt - SQLPackage with Script Action does not produce any Copy Always scripts&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15502659/what-is-the-syntax-for-adding-multiple-arguments-onto-the-variables-parameter"&gt;Stack Overflow - ssdt - What is the syntax for adding multiple arguments onto the "Variables" parameter in sqlpackage.exe?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/hh550080(v=vs.103).aspx"&gt;MSDN - SqlPackage.exe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phoebix.com/2013/09/19/extract-dacpac-using-command-line/"&gt;Extract DacPac Using Command Line | phoebix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rusanu/DbUtilSqlCmd"&gt;rusanu/DbUtilSqlCmd Â· GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://nullfactory.net/2015/10/cdn-streaming-video-azure-storage/</guid><link>http://nullfactory.net/2015/10/cdn-streaming-video-azure-storage/</link><title>Setting up a CDN to Stream Video via Azure Storage</title><description>&lt;p&gt;I needed to setup an Azure Content Delivery Network (CDN) in order to stream some video files stored in Azure Blob Storage. Sounds simple enough right? Well, yes for the most part, but I did hit a few hurdles along the way. This post would hopefully help me avoid them the next time.&lt;/p&gt;

&lt;h2&gt;Create the Storage Account&lt;/h2&gt;

&lt;p&gt;Something I found out after the fact was that CDN endpoints &lt;a href="http://stackoverflow.com/questions/32569564/azure-resource-manager-deployment-vs-classic-deployment-of-storage-accounts"&gt;currently only support classic storage accounts&lt;/a&gt;. So the first order of business is to create a classic storage account either via old portal or using a &lt;a href="http://nullfactory.net/2015/10/deploy-classic-storage-azure-resource-manager/"&gt;resource group manager template&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Another thing I found out is that, at the time of writing, classic storage accounts cannot be made under the 'East US' location. The closest alternative was 'East US 2' and worked fine; I guess its something worth considering if you wanted to co-locate all your resources.&lt;/p&gt;

&lt;p&gt;Next, create a container within storage account - the container would host the files that would be served by the CDN. It can be created manually via the old portal or even through visual studio. Ensure that container access type is set to &lt;code&gt;Public Blob&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Upgrade the Storage Account to a Newer Service Version&lt;/h2&gt;

&lt;p&gt;The first time I tried to tried to stream a video, it did not work as expected; stream was very choppy. It turns out that the service version that got set on the storage was not the latest. &lt;a href="http://blog.thoughtstuff.co.uk/2014/01/streaming-mp4-video-files-in-azure-storage-containers-blob-storage/"&gt;Read more here&lt;/a&gt;, &lt;a href="https://msdn.microsoft.com/library/azure/dd894041.aspx"&gt;and here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So the next step is update the storage account to the latest version in order to take advantage of the improvements. This can be done using the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var credentials = new StorageCredentials("accountname", "accountkey");
    var account = new CloudStorageAccount(credentials, true);
    var client = account.CreateCloudBlobClient();
    var properties = client.GetServiceProperties();
    properties.DefaultServiceVersion = "2013-08-15";
    client.SetServiceProperties(properties);
    Console.WriteLine(properties.DefaultServiceVersion);
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Sat, 10 Oct 2015 13:00:00 Z</pubDate><a10:updated>2015-10-10T13:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I needed to setup an Azure Content Delivery Network (CDN) in order to stream some video files stored in Azure Blob Storage. Sounds simple enough right? Well, yes for the most part, but I did hit a few hurdles along the way. This post would hopefully help me avoid them the next time.&lt;/p&gt;

&lt;h2&gt;Create the Storage Account&lt;/h2&gt;

&lt;p&gt;Something I found out after the fact was that CDN endpoints &lt;a href="http://stackoverflow.com/questions/32569564/azure-resource-manager-deployment-vs-classic-deployment-of-storage-accounts"&gt;currently only support classic storage accounts&lt;/a&gt;. So the first order of business is to create a classic storage account either via old portal or using a &lt;a href="http://nullfactory.net/2015/10/deploy-classic-storage-azure-resource-manager/"&gt;resource group manager template&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Another thing I found out is that, at the time of writing, classic storage accounts cannot be made under the 'East US' location. The closest alternative was 'East US 2' and worked fine; I guess its something worth considering if you wanted to co-locate all your resources.&lt;/p&gt;

&lt;p&gt;Next, create a container within storage account - the container would host the files that would be served by the CDN. It can be created manually via the old portal or even through visual studio. Ensure that container access type is set to &lt;code&gt;Public Blob&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Upgrade the Storage Account to a Newer Service Version&lt;/h2&gt;

&lt;p&gt;The first time I tried to tried to stream a video, it did not work as expected; stream was very choppy. It turns out that the service version that got set on the storage was not the latest. &lt;a href="http://blog.thoughtstuff.co.uk/2014/01/streaming-mp4-video-files-in-azure-storage-containers-blob-storage/"&gt;Read more here&lt;/a&gt;, &lt;a href="https://msdn.microsoft.com/library/azure/dd894041.aspx"&gt;and here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So the next step is update the storage account to the latest version in order to take advantage of the improvements. This can be done using the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var credentials = new StorageCredentials("accountname", "accountkey");
    var account = new CloudStorageAccount(credentials, true);
    var client = account.CreateCloudBlobClient();
    var properties = client.GetServiceProperties();
    properties.DefaultServiceVersion = "2013-08-15";
    client.SetServiceProperties(properties);
    Console.WriteLine(properties.DefaultServiceVersion);
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Create the CDN Endpoint&lt;/h2&gt;

&lt;p&gt;Setting up the CDN itself it pretty straight forward:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new CDN through the old portal by selecting &lt;code&gt;New &amp;gt; CDN &amp;gt; Quick Create&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select your subscription and set the origin type as &lt;code&gt;Storage Account&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nullfactory.net/images/posts/AzureCDNStream/10_CreateCDN.png"&gt;&lt;img src="http://nullfactory.net/images/posts/AzureCDNStream/10_CreateCDN.png" alt="Azure Create CDN" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select one of the classic storage accounts from the &lt;code&gt;Origin Url&lt;/code&gt; drop down and hit the create button.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nullfactory.net/images/posts/AzureCDNStream/20_CDNCreated.png"&gt;&lt;img src="http://nullfactory.net/images/posts/AzureCDNStream/20_CDNCreated.png" alt="Azure CDN Created" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Upload Content&lt;/h2&gt;

&lt;p&gt;Now that everything is setup, go ahead and upload the content into blob storage using Visual Studio or &lt;a href="https://azurestorageexplorer.codeplex.com/"&gt;Azure Storage Explorer&lt;/a&gt;. Once the content is propagated, video streaming should be smooth and working as expected.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/32569564/azure-resource-manager-deployment-vs-classic-deployment-of-storage-accounts"&gt;Stack Overflow - Azure Resource Manager Deployment vs Classic Deployment of Storage Accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7235082/is-microsoft-azure-cdn-a-real-cdn-or-something-else-entirely"&gt;Stack Overflow - Is Microsoft Azure CDN A Real CDN Or Something Else Entirely?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.thoughtstuff.co.uk/2014/01/streaming-mp4-video-files-in-azure-storage-containers-blob-storage/"&gt;Streaming MP4 video in Azure Storage containers (Blob Storage) | thoughtstuff | Tom Morgan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/library/azure/dd894041.aspx"&gt;MSDN - Versioning for the Azure Storage Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azurestorageexplorer.codeplex.com/"&gt;Azure Storage Explorer - Home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item></channel></rss>