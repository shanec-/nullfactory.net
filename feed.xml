<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">nullfactory.net</title><subtitle type="text">nullfactory.net</subtitle><id>http://nullfactory.net/</id><updated>2017-04-15T10:08:27+10:00</updated><author><name>Shane Carvalho</name><uri>http://nullfactory.net</uri><email>shanec_@hotmail.com</email></author><generator>Sandra.Snow Atom Generator</generator><link rel="alternate" href="http://nullfactory.net/feed.xml" /><link rel="self" type="text/html" title="nullfactory.net" href="http://nullfactory.net/feed.xml" /><entry><id>http://nullfactory.net/2017/04/special-characters-primary-field-breaks-sharepoint-file-upload/</id><title type="text">Special Characters in Primary Field Breaks SharePoint File Upload in Dynamics 365</title><summary type="html">&lt;p&gt;My colleagues and I ran into this confusing issue the other day. We've been working on a Dynamics 365 Online instance integrated with SharePoint (as a server side configuration) and everything seem to be working as expected but for a few records. On these records, anytime the user hits the upload button in document management they are greeted with the following error message instead of the expected upload dialog:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An error has occurred. &lt;/p&gt;
  
  &lt;p&gt;Try this action again. If the problem continues, check the Microsoft Dynamics 365 Community for solutions or contact your organization's Microsoft Dynamics 365 Administrator. Finally, you can contact Microsoft Support.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/BrokenSharePointInteg/10_error_dialog.png" alt="Upload Error Dialog" /&gt;&lt;/p&gt;

</summary><published>2017-04-13T14:00:00Z</published><updated>2017-04-13T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/04/special-characters-primary-field-breaks-sharepoint-file-upload/" /><content type="html">&lt;p&gt;My colleagues and I ran into this confusing issue the other day. We've been working on a Dynamics 365 Online instance integrated with SharePoint (as a server side configuration) and everything seem to be working as expected but for a few records. On these records, anytime the user hits the upload button in document management they are greeted with the following error message instead of the expected upload dialog:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An error has occurred. &lt;/p&gt;
  
  &lt;p&gt;Try this action again. If the problem continues, check the Microsoft Dynamics 365 Community for solutions or contact your organization's Microsoft Dynamics 365 Administrator. Finally, you can contact Microsoft Support.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/BrokenSharePointInteg/10_error_dialog.png" alt="Upload Error Dialog" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;When I navigated to the physical location on the SharePoint server, I can see that a folder record was created successfully in the Document Library and that the logged user has permission to make changes to the folder and its contents. &lt;/p&gt;

&lt;p&gt;Next, I tried manually uploading a document through the SharePoint server and in order to verify that the document was reflected back in the CRM integration component. This too was successful and I verified that it has the ability to perform CRUD operations as expected. &lt;/p&gt;

&lt;p&gt;None of these seemed to get me closer to identifying the issue - the upload control in CRM was still broken for the record.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/BrokenSharePointInteg/20_sharepointfolder.png" alt="SharePoint Folder" /&gt;&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;With a little bit of trial and error we were finally able to narrow down the issue - it turned out to be the value of the primary field of the record. &lt;/p&gt;

&lt;p&gt;By default, the integration component uses the value of the primary field in order to generate a unique folder name in SharePoint, it takes parts of the name and then appends a unique salt to the end. &lt;/p&gt;

&lt;p&gt;So the problem in our broken record set was that the primary field value contained special characters. While the folder creation itself appears to have cleaned out the these characters, the upload control still did not like it. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/BrokenSharePointInteg/30_folder_invalid_chars.png" alt="SharePoint folder invalid characters" /&gt;&lt;/p&gt;

&lt;p&gt;Therefore, the fix itself pretty simple - remove the invalid characters from the primary field and the upload control started working as expected.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/BrokenSharePointInteg/40_validfolder.png" alt="valid SharePoint Folder" /&gt;&lt;/p&gt;

&lt;p&gt;This issue appears to exists as of &lt;code&gt;Microsoft Dynamics 365 Version 1612 (8.2.1.164) (DB 8.2.1.164) online&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I can think of two ways we can avoid this in the future:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add validation on the primary field to explicitly filter out the special characters - this is the most sensible approach until Microsoft fixes the upload control.&lt;/li&gt;
&lt;li&gt;Handle the creation of the SharePointLocation record and the physical SharePoint folder yourself - this is obviously more work, but provides you more granular control.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this helps anyone else who might encounter this issue.&lt;/p&gt;
</content></entry><entry><id>http://nullfactory.net/2017/04/slide-deck-melbourne-ug/</id><title type="text">Source Control and Release Management - Presentation Slide Deck</title><summary type="html">&lt;p&gt;A few weeks back, I did a presentation on &lt;code&gt;Source Control and Release Management Strategy for Dynamics 365 Solutions&lt;/code&gt; at the Melbourne Dynamics 365 User Group. Here is the slide deck for that presentation:&lt;/p&gt;

</summary><published>2017-04-11T14:00:00Z</published><updated>2017-04-11T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/04/slide-deck-melbourne-ug/" /><content type="html">&lt;p&gt;A few weeks back, I did a presentation on &lt;code&gt;Source Control and Release Management Strategy for Dynamics 365 Solutions&lt;/code&gt; at the Melbourne Dynamics 365 User Group. Here is the slide deck for that presentation:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;a href="https://www.slideshare.net/shanec_/source-control-and-release-strategy-for-dynamics-365-solutions"&gt;https://www.slideshare.net/shanec_/source-control-and-release-strategy-for-dynamics-365-solutions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As always, feel free to reach me through social media if you have any questions.&lt;/p&gt;
</content></entry><entry><id>http://nullfactory.net/2017/02/release-strategy-for-dynamics-crm-versioning-part-4/</id><title type="text">Release Strategy for Dynamics CRM - Part 4 - Versioning</title><summary type="html">&lt;p&gt;In this post I detail my approach to implement an automated versioning strategy in CRM solutions and its custom assemblies with the help of Visual Studio Team Services.&lt;/p&gt;

&lt;p&gt;Although I originally only intended it to be a 3 part series I think I will continue to add to it as I keep making improvements. To recap, I previously prepared the project structure to host a CRM solution with the aid of the &lt;code&gt;nullfactory-xrm&lt;/code&gt; &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;generator&lt;/a&gt; and created a build and release definitions for it. You can find the previous posts here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;Release Strategy for Dynamics CRM - Part 1 - Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/"&gt;Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Strategy for Dynamics CRM - Part 4 - Versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were two aspects of versioning that I wanted to automatically increment with each release. Firstly the CRM Solution itself and then the custom assemblies included as part of the solution. I also wanted the flexibility to version the two independently of each other (I don't think its a very common scenario, but I would still like to have it as an available option).&lt;/p&gt;

&lt;p&gt;As with my previous posts, the instructions in this are specific to Visual Studio Team Services (VSTS), but can be adapted to work with other build and release systems. &lt;/p&gt;

</summary><published>2017-02-06T13:00:00Z</published><updated>2017-02-06T13:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/02/release-strategy-for-dynamics-crm-versioning-part-4/" /><content type="html">&lt;p&gt;In this post I detail my approach to implement an automated versioning strategy in CRM solutions and its custom assemblies with the help of Visual Studio Team Services.&lt;/p&gt;

&lt;p&gt;Although I originally only intended it to be a 3 part series I think I will continue to add to it as I keep making improvements. To recap, I previously prepared the project structure to host a CRM solution with the aid of the &lt;code&gt;nullfactory-xrm&lt;/code&gt; &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;generator&lt;/a&gt; and created a build and release definitions for it. You can find the previous posts here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;Release Strategy for Dynamics CRM - Part 1 - Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/"&gt;Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Strategy for Dynamics CRM - Part 4 - Versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were two aspects of versioning that I wanted to automatically increment with each release. Firstly the CRM Solution itself and then the custom assemblies included as part of the solution. I also wanted the flexibility to version the two independently of each other (I don't think its a very common scenario, but I would still like to have it as an available option).&lt;/p&gt;

&lt;p&gt;As with my previous posts, the instructions in this are specific to Visual Studio Team Services (VSTS), but can be adapted to work with other build and release systems. &lt;/p&gt;

&lt;!--excerpt--&gt; 

&lt;h2&gt;Pre-requisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ideally, a solution structure generated using version 1.3 (or better) of the &lt;code&gt;nullfactory-xrm&lt;/code&gt; generator as the template includes the versioning script as part of it - for the sake of simplicity, the post assumes that this is true. &lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;More Info.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;All solution and custom code artifacts and checked-in into source control in VSTS. &lt;/li&gt;
&lt;li&gt;Basic build definition that builds the artifacts and generates a CRM solution using the &lt;code&gt;SolutionPackager.exe&lt;/code&gt;. &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;More info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Integrating with the Team Build&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start off by creating a standard build definition for the solution as described in &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Part 2&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt4/10_BuildDefinition.png" alt="Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next we need to define a pair of variables for each set of version numbers we want to maintain. In this scenario I only want one version number to be shared between the custom assemblies and CRM solution. Let's do this by navigating to the &lt;code&gt;Variables&lt;/code&gt; tab and creating the &lt;code&gt;SuperSolutionMajorVersion&lt;/code&gt; and &lt;code&gt;SuperSolutionMinorVersion&lt;/code&gt; variables.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt4/20_DefineBuildVariables.png" alt="Define Build Variables" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to keep the artifact build number consistent with the name of the actual build, so navigate to the &lt;code&gt;General&lt;/code&gt; tab and set the &lt;code&gt;Build number format&lt;/code&gt; to &lt;code&gt;$(SuperSolutionMajorVersion).$(SuperSolutionMinorVersion).$(Build.BuildId).0&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Notice that I intentionally hard coded the release version to &lt;code&gt;0&lt;/code&gt;. Tweak this format to suit your own needs, but ensure that the number generated is compatible with the versioning scheme used by CRM - &lt;em&gt;major.minor.build.release&lt;/em&gt; or &lt;em&gt;year.month.day.revision&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt4/30_SetBuildNumberFormat.png" alt="Set Build Number Format" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a PowerShell task which invokes the &lt;code&gt;ApplyVersionToArtifact.ps1&lt;/code&gt; against the assemblies.&lt;/p&gt;

&lt;p&gt;.\Nullfactory.Xrm.Tooling\scripts\ApplyVersionToArtifact.ps1&lt;/p&gt;

&lt;p&gt;ApplyVersionToAssemblies -BuildSourcePath $(Build.SourcesDirectory) -BuildBuildNumber "$(SuperSolutionMajorVersion).$(SuperSolutionMinorVersion).$(Build.BuildId).0"&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt4/40_AssemblyPowerShell.png" alt="Apply Assembly Version PowerShell" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly create a second PowerShell task that applies the version number to the CRM Solution.&lt;/p&gt;

&lt;p&gt;. .\Nullfactory.Xrm.Tooling\Scripts\ApplyVersionToArtifact.ps1&lt;/p&gt;

&lt;p&gt;ApplyVersionToCrmSolution -BuildSourcePath $(Build.SourcesDirectory) -BuildBuildNumber "$(SuperSolutionMajorVersion).$(SuperSolutionMinorVersion).$(Build.BuildId).0"&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt4/50_SolutionPowerShell.png" alt="Apply Crm Solution Version PowerShell" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, lets queue a new build to make sure that everything works as expected. In the Queue build dialog, manually provide a Major and Minor version for the new release. The Major and Minor versions would act as the "public product" number, were as the build number would be the actual iteration.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt4/55_QueueBuild.png" alt="Queue New Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify that the build completed successfully - notice that it created using new build number formatting.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt4/60_BuildResult.png" alt="Build Results" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open up the packaged solution and verify that the &lt;code&gt;Solution.xml&lt;/code&gt; has the updated version number. Also ensure that the assembly within the solution has been updated as well.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt4/70_SolutionXml.png" alt="Empty release template" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;While there were many implementations on the web I based mine off this one &lt;a href="https://github.com/cilerler/rupen/blob/dea035c6e6158abc7a6e449b931ae316c0ef2eb8/build.vso/ApplyVersionToAssemblies.ps1"&gt;https://github.com/cilerler/rupen/blob/dea035c6e6158abc7a6e449b931ae316c0ef2eb8/build.vso/ApplyVersionToAssemblies.ps1&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If the project structure was not generated using the &lt;code&gt;nullfactory-xrm&lt;/code&gt; generator, then &lt;a href="https://github.com/shanec-/generator-nullfactory-xrm/blob/master/generators/app/templates/Nullfactory.Xrm.Tooling/Scripts/ApplyVersionToArtifact.ps1"&gt;download the latest version&lt;/a&gt; of the &lt;code&gt;ApplyVersionToAssemblies.ps1&lt;/code&gt;script into your own project structure. &lt;/p&gt;

&lt;p&gt;The versioning script can be run manually on developers machine, but its most effective when used together with an automated build and release suite like VSTS. &lt;/p&gt;

&lt;p&gt;I had considered using a tokenization as a possible approach to replacing the version numbers, but the problem with that is that &lt;code&gt;solution packager&lt;/code&gt; does not like tokens embedded in the &lt;code&gt;solution.xml&lt;/code&gt; file. This means that a developer cannot build the solution in their own development environment.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cilerler/rupen/blob/dea035c6e6158abc7a6e449b931ae316c0ef2eb8/build.vso/ApplyVersionToAssemblies.ps1"&gt;rupen/ApplyVersionToAssemblies.ps1 at dea035c6e6158abc7a6e449b931ae316c0ef2eb8 · cilerler/rupen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/mt593040.aspx"&gt;Create patches to simplify solution updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.dynamics.com/crm/f/117/t/151258"&gt;Solution versioning best practice - Microsoft Dynamics CRM Community Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://journeyintocrm.com/archives/1092"&gt;Hardcore CRM: Do a major upgrade of a plugin version! | Journey into CRM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crmbusiness.wordpress.com/2014/03/31/crm-2013-overview-of-solutions/"&gt;CRM 2013 – Understanding Solutions and how they work – Hosk's Dynamic CRM Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chamindac.blogspot.com.au/2015/12/apply-build-number-to-assembly-version.html"&gt;Chaminda's Blog: Apply Build Number to Assembly Version with New TFS Builds (Build vNext)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intovsts.net/2015/08/24/tfs-build-2015-and-versioning/"&gt;TFS Build 2015 … and versioning! | Into ALM with TFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/pietergheysens/14d7d98547fe35470d0e"&gt;GitHub Gist - Update-AssemblyInfoVersionFiles.ps1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tfsbuildextensions/CustomActivities/blob/master/Source/Scripts/ApplyVersionToAssemblies.ps1"&gt;CustomActivities/ApplyVersionToAssemblies.ps1 at master · tfsbuildextensions/CustomActivities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-devlabs.utilitytasks"&gt;Release Management Utility tasks - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2016/11/scheduling-the-uptime-of-an-azure-virtual-machine/</id><title type="text">Scheduling the Uptime of an Azure Virtual Machine</title><summary type="html">&lt;p&gt;In a previous post I setup a &lt;a href="http://nullfactory.net/2016/11/setting-up-a-private-build-agent-in-visual-studio-team-services/"&gt;build agent in a private pipeline&lt;/a&gt; - hosted within a Azure Virtual Machine (VM). In this one, I try to minimize the uptime of the VM by making it run only during work hours - I require it to start automatically first thing in the morning and then turn itself off at the close of business. In order to achieve this I make use of the &lt;a href="https://azure.microsoft.com/en-au/services/automation/"&gt;Azure Automation&lt;/a&gt; feature.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Let's start off by logging into our Azure account and creating a new &lt;code&gt;Automation Account&lt;/code&gt; entry. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/10_Automation.png" alt="Search Automation Account" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/20_CreateAutomation.png" alt="Create Automation Account" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide the required details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt; - Name for the automation account.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Subscription&lt;/code&gt; - Azure subscription for this account.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Resource Group&lt;/code&gt; - Create or select an existing resource group from the list. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Location&lt;/code&gt; - Select an available region from the list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Create Azure Run As account&lt;/code&gt; - Select &lt;code&gt;Yes&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/30_AddAutomationInfo.png" alt="Add Automation Account" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;Create&lt;/code&gt; button to start provisioning the automation account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once done, navigate to it's blade via the resource groups and click on the &lt;code&gt;Runbooks&lt;/code&gt; widget.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/40_CreateRunbook.png" alt="Create runbook" /&gt;&lt;/p&gt;

</summary><published>2016-11-27T13:00:00Z</published><updated>2016-11-27T13:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2016/11/scheduling-the-uptime-of-an-azure-virtual-machine/" /><content type="html">&lt;p&gt;In a previous post I setup a &lt;a href="http://nullfactory.net/2016/11/setting-up-a-private-build-agent-in-visual-studio-team-services/"&gt;build agent in a private pipeline&lt;/a&gt; - hosted within a Azure Virtual Machine (VM). In this one, I try to minimize the uptime of the VM by making it run only during work hours - I require it to start automatically first thing in the morning and then turn itself off at the close of business. In order to achieve this I make use of the &lt;a href="https://azure.microsoft.com/en-au/services/automation/"&gt;Azure Automation&lt;/a&gt; feature.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Let's start off by logging into our Azure account and creating a new &lt;code&gt;Automation Account&lt;/code&gt; entry. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/10_Automation.png" alt="Search Automation Account" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/20_CreateAutomation.png" alt="Create Automation Account" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide the required details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt; - Name for the automation account.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Subscription&lt;/code&gt; - Azure subscription for this account.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Resource Group&lt;/code&gt; - Create or select an existing resource group from the list. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Location&lt;/code&gt; - Select an available region from the list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Create Azure Run As account&lt;/code&gt; - Select &lt;code&gt;Yes&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/30_AddAutomationInfo.png" alt="Add Automation Account" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;Create&lt;/code&gt; button to start provisioning the automation account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once done, navigate to it's blade via the resource groups and click on the &lt;code&gt;Runbooks&lt;/code&gt; widget.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/40_CreateRunbook.png" alt="Create runbook" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The runbook gallery had a couple of really good graphical runbooks that suited my purposes - the &lt;code&gt;Start Azure V2 VMs&lt;/code&gt; and &lt;code&gt;Stop Azure V2 VMs&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;Browse Gallery&lt;/code&gt; button, select the &lt;code&gt;Start Azure V2 VMs&lt;/code&gt; graphical runbook and then click &lt;code&gt;OK&lt;/code&gt; to confirm the selection.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/50_ChooseRecipe.png" alt="Choose Graphical Runbook" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inspect the flow and click the &lt;code&gt;Import&lt;/code&gt; button when ready.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/60_ImportRecipe.png" alt="Import Graphical Runbook" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate into the newly added runbook and click the &lt;code&gt;Edit&lt;/code&gt; button. Make any alterations if required and click the &lt;code&gt;Publish&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/70_PublishRunbook.png" alt="Publish Runbook" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Back on the runbook blade, click on &lt;code&gt;Schedules&lt;/code&gt; widget and then click on the &lt;code&gt;Add a schedule&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/80_AddSchedule.png" alt="Add Schedule" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;Link a schedule to your runbook&lt;/code&gt; and then create a new schedule. Provide the time and recurrence for the script execution. &lt;a href="https://docs.microsoft.com/en-au/azure/automation/automation-scheduling-a-runbook"&gt;Read more about scheduling here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/90_FinalizeSchedule.png" alt="Finalize Schedule" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, select &lt;code&gt;Configure parameters and run settings&lt;/code&gt; and provide a virtual machine name or resource group which would start on execution.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AzureVmSchedule/100_Parameters.png" alt="Schedule parameters" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;ok&lt;/code&gt; button once done. You should get a confirmation that the schedule is linked to a runbook. &lt;/p&gt;

&lt;p&gt;That's it. The runbook would execute at the pre-defined time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repeat the above steps again to create a stop script using the &lt;code&gt;Stop Azure V2 VMs&lt;/code&gt; graphical runbook. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-au/services/automation/"&gt;Automation – Cloud process &amp;amp; workflow automation | Microsoft Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-au/azure/automation/automation-scheduling-a-runbook"&gt;Scheduling a runbook in Azure Automation | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2016/11/setting-up-a-private-build-agent-in-visual-studio-team-services/</id><title type="text">Setting up a Private Build Agent in Visual Studio Team Services</title><summary type="html">&lt;p&gt;I've started working on a new hobby project hosted in Visual Studio Team Services (VSTS) and was keen to follow mature build and release practices on it. Given that I am essentially a one man team, I decided to make due with the free tiers. One of the limitations in this tier is the number of CPU cycles available for hosted builds and releases. This means that if I setup all - continuous integration (CI) build, standard build and release definition I am surely going to use up all the available minutes.&lt;/p&gt;

&lt;p&gt;The goal was to keep the overall costs low without sacrificing any build and release related automation. Luckily, VSTS allows us to host our own agents on a &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms.build-release-private-pipelines"&gt;private pipeline&lt;/a&gt;. This seemed the ideal a minimalist setup for me, this looked to be cheaper than having additional &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms.build-release-hosted-pipelines"&gt;hosted pipelines&lt;/a&gt;. Also worth noting that VSTS currently provides one private pipeline in the free tier with the ability to purchase more private agents (which is slightly cheaper than the hosted).&lt;/p&gt;

&lt;p&gt;In this post I go about setting up a virtual machine and then install and configure a build/release agent that can be used by the team builds and releases. &lt;/p&gt;

&lt;h2&gt;Provisioning the Virtual Machine&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Start off by creating a new resource group dedicated for the build server(s). This is so that we can tie the scheduler to shutdown all agents in a resource group without having to shutdown individual servers.&lt;/li&gt;
&lt;li&gt;Next, let's provision a new Windows virtual machine, customize this as you see fit - I used a standard Windows 10 machine. In order to make life easier, I chose a higher tier during your setup with the intention of scaling it down to a lower one once everything is setup.&lt;/li&gt;
&lt;li&gt;For this to be a viable build server, I installed the &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=42637"&gt;.NET 4.5.2 targeting pack&lt;/a&gt;. Alternatively, you could install Visual Studio Community Edition or any other dependencies that your particular build might require.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Installing the Agent&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Log into the newly provisioned virtual machine.&lt;/li&gt;
&lt;li&gt;Next, open a browser and log in to your VSTS instance from within it and navigate to settings page by clicking on the cog icon. Then click the &lt;code&gt;Agent pools&lt;/code&gt; sub menu in order to view the list of available agent pools.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;Download Agent&lt;/code&gt; button and follow the instructions to install the agent.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/10_DownloadAgent.png" alt="Download agent" /&gt;&lt;/p&gt;

</summary><published>2016-11-25T13:00:00Z</published><updated>2016-11-25T13:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2016/11/setting-up-a-private-build-agent-in-visual-studio-team-services/" /><content type="html">&lt;p&gt;I've started working on a new hobby project hosted in Visual Studio Team Services (VSTS) and was keen to follow mature build and release practices on it. Given that I am essentially a one man team, I decided to make due with the free tiers. One of the limitations in this tier is the number of CPU cycles available for hosted builds and releases. This means that if I setup all - continuous integration (CI) build, standard build and release definition I am surely going to use up all the available minutes.&lt;/p&gt;

&lt;p&gt;The goal was to keep the overall costs low without sacrificing any build and release related automation. Luckily, VSTS allows us to host our own agents on a &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms.build-release-private-pipelines"&gt;private pipeline&lt;/a&gt;. This seemed the ideal a minimalist setup for me, this looked to be cheaper than having additional &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms.build-release-hosted-pipelines"&gt;hosted pipelines&lt;/a&gt;. Also worth noting that VSTS currently provides one private pipeline in the free tier with the ability to purchase more private agents (which is slightly cheaper than the hosted).&lt;/p&gt;

&lt;p&gt;In this post I go about setting up a virtual machine and then install and configure a build/release agent that can be used by the team builds and releases. &lt;/p&gt;

&lt;h2&gt;Provisioning the Virtual Machine&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Start off by creating a new resource group dedicated for the build server(s). This is so that we can tie the scheduler to shutdown all agents in a resource group without having to shutdown individual servers.&lt;/li&gt;
&lt;li&gt;Next, let's provision a new Windows virtual machine, customize this as you see fit - I used a standard Windows 10 machine. In order to make life easier, I chose a higher tier during your setup with the intention of scaling it down to a lower one once everything is setup.&lt;/li&gt;
&lt;li&gt;For this to be a viable build server, I installed the &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=42637"&gt;.NET 4.5.2 targeting pack&lt;/a&gt;. Alternatively, you could install Visual Studio Community Edition or any other dependencies that your particular build might require.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Installing the Agent&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Log into the newly provisioned virtual machine.&lt;/li&gt;
&lt;li&gt;Next, open a browser and log in to your VSTS instance from within it and navigate to settings page by clicking on the cog icon. Then click the &lt;code&gt;Agent pools&lt;/code&gt; sub menu in order to view the list of available agent pools.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;Download Agent&lt;/code&gt; button and follow the instructions to install the agent.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/10_DownloadAgent.png" alt="Download agent" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While the agent's downloading, let's &lt;a href="https://www.visualstudio.com/en-us/docs/setup-admin/team-services/use-personal-access-tokens-to-authenticate"&gt;setup the Personal Access Token&lt;/a&gt; (PAT) that the agent would use to access VSTS. To do this navigate to the &lt;code&gt;Security&lt;/code&gt; tab under your profile context menu.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/20_PatSecurity.png" alt="PAT security link" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the &lt;code&gt;Personal access tokens&lt;/code&gt; tab, click the &lt;code&gt;Add&lt;/code&gt; button to create a new one.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/30_AddPatToken.png" alt="Add PAT token" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;Expires in&lt;/code&gt; and &lt;code&gt;Accounts&lt;/code&gt; information as appropriate. As for the scopes, provide the &lt;code&gt;Agent Pools (read, manage)&lt;/code&gt; scope. Read more about roles and scopes &lt;a href="https://github.com/Microsoft/vsts-agent/blob/master/docs/start/roles.md"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/40_PatScope.png" alt="Set PAT scope" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;Create Token&lt;/code&gt; button in order to generate a token. Copy the newly generated token, we would be using this when configuring the build agent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optionally create a new agent pool dedicated for your on-premises agent. 
&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/50_CreateAgentPool.png" alt="Create agent pool" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Configure and Running the Agent&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;config.cmd&lt;/code&gt; batch file in order to start the agent configuration. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/70_ConfigAgent2.png" alt="Configure Agent" /&gt;&lt;/p&gt;

&lt;p&gt;Enter the details for the following notable settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Enter server URL&lt;/code&gt; - this is the VSTS server url.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enter personal access token&lt;/code&gt; - The token that we generated previously.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enter remote agent pool&lt;/code&gt; - If you previously created a dedicated agent pool, then provide its name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enter agent name&lt;/code&gt; - The name of the agent&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you did not opt-in to run the agent as as a service, manually start the agent using the &lt;code&gt;run.cmd&lt;/code&gt; batch file.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/90_RunAgent.png" alt="Run agent" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that the new agent is running all we have to do is to let our build know about it. Do this by editing the build definition and setting the &lt;code&gt;Default agent queue&lt;/code&gt; located in the &lt;code&gt;General&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/VstsOnPremAgent/80_SetAgentPoolBuild.png" alt="Set build agent pool" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stay tuned for the next post where I schedule the uptime of the virtual machine.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/release/getting-started/configure-agents"&gt;Configure agents for Microsoft Release Management in Visual Studio Team Services and Team Foundation Server 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/setup-admin/team-services/use-personal-access-tokens-to-authenticate"&gt;Authenticate access with personal access tokens | Visual Studio Team Services &amp;amp; TFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/build/admin/agents/v2-windows"&gt;Deploy an agent on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/vsts-agent/blob/master/docs/start/roles.md"&gt;Configure Account and Roles vsts-agent/roles.md at master · Microsoft/vsts-agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms.build-release-private-pipelines"&gt;Private Pipelines - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms.build-release-hosted-pipelines"&gt;Hosted Pipelines - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=42637"&gt;Download Microsoft .NET Framework 4.5.2 Developer Pack for Windows Vista SP2, Windows 7 SP1, Windows 8, Windows 8.1, Windows Server 2008 SP2 Windows Server 2008 R2 SP1, Windows Server 2012 and Windows Server 2012 R2 from Official Microsoft Download Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/</id><title type="text">Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release</title><summary type="html">&lt;p&gt;This is the final installment of the a three part series. Use to following links to access part 1 and 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;Release Strategy for Dynamics CRM - Part 1 - Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/02/release-strategy-for-dynamics-crm-versioning-part-4/"&gt;Release Strategy for Dynamics CRM - Part 4 - Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the previous two posts I show you how to create the project structure and create a basic team build for your CRM solution artifacts. In this final installment I go about setting up a release definition for the build that we created.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let's start off by creating a new release by navigating to the &lt;code&gt;Build and Release &amp;gt; Release&lt;/code&gt; in your team project.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the &lt;code&gt;Empty&lt;/code&gt; template option and click the next button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/10_ReleaseDefinition.png" alt="Empty release template" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the next step, choose the source for this release - we'll be using the &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;build definition that we created in part 2&lt;/a&gt;. Once ready click the &lt;code&gt;Create&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/20_SelectBuildDefinition.png" alt="Select build defintion" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now lets declare the variables that would be used later in the process. Navigate to the &lt;code&gt;Variables&lt;/code&gt; tab and define the following variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DevDeployLogin&lt;/code&gt; - The username that used to deploy the solution.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DevDeployPassword&lt;/code&gt; - The password for the same account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to define the &lt;code&gt;DevDeployPassword&lt;/code&gt; as a secret by clicking the padlock icon next to the field.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/100_SetupVariables.png" alt="Release Variables" /&gt;&lt;/p&gt;

&lt;p&gt;Read more about &lt;a href="https://www.visualstudio.com/en-us/docs/build/define/variables"&gt;build and release variables here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</summary><published>2016-11-17T13:00:00Z</published><updated>2016-11-17T13:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/" /><content type="html">&lt;p&gt;This is the final installment of the a three part series. Use to following links to access part 1 and 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;Release Strategy for Dynamics CRM - Part 1 - Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/02/release-strategy-for-dynamics-crm-versioning-part-4/"&gt;Release Strategy for Dynamics CRM - Part 4 - Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the previous two posts I show you how to create the project structure and create a basic team build for your CRM solution artifacts. In this final installment I go about setting up a release definition for the build that we created.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let's start off by creating a new release by navigating to the &lt;code&gt;Build and Release &amp;gt; Release&lt;/code&gt; in your team project.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the &lt;code&gt;Empty&lt;/code&gt; template option and click the next button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/10_ReleaseDefinition.png" alt="Empty release template" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the next step, choose the source for this release - we'll be using the &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;build definition that we created in part 2&lt;/a&gt;. Once ready click the &lt;code&gt;Create&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/20_SelectBuildDefinition.png" alt="Select build defintion" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now lets declare the variables that would be used later in the process. Navigate to the &lt;code&gt;Variables&lt;/code&gt; tab and define the following variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DevDeployLogin&lt;/code&gt; - The username that used to deploy the solution.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DevDeployPassword&lt;/code&gt; - The password for the same account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to define the &lt;code&gt;DevDeployPassword&lt;/code&gt; as a secret by clicking the padlock icon next to the field.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/100_SetupVariables.png" alt="Release Variables" /&gt;&lt;/p&gt;

&lt;p&gt;Read more about &lt;a href="https://www.visualstudio.com/en-us/docs/build/define/variables"&gt;build and release variables here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt; 

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Next, create a new agent step by clicking the &lt;code&gt;Add tasks&lt;/code&gt; and selecting &lt;code&gt;Add an agent phase&lt;/code&gt; in the context menu.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/30_AddAgentPhase.png" alt="Add agent phase task" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select a &lt;code&gt;PowerShell&lt;/code&gt; in the task catalog and click the &lt;code&gt;Add&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/40_AgentPhasePowerShell.png" alt="Add agent phase powershell" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the task is added, set the type to &lt;code&gt;Inline Script&lt;/code&gt; and add the following script in the &lt;code&gt;Inline Script&lt;/code&gt; field:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The purpose of this script is to install the NuGet provider on the agent. This is a prerequisite of the &lt;code&gt;Install-Module&lt;/code&gt; command that will be used by the &lt;code&gt;Deploy-CrmSolution&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;And while we're here, let's rename the task to a more appropriate one. This would help us to distinguish it better.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/50_SetupEnvironmentPreReqStep.png" alt="Configure environment prerequisite powershell" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, add a second PoweShell script. This time set the type as &lt;code&gt;File Path&lt;/code&gt; and rename the task to &lt;code&gt;Deploy CRM Solution&lt;/code&gt;. This task would be performing the actual deployment to CRM.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/60_CrmDeployStep.png" alt="Add CRM deploy step" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the ellipsis on the &lt;code&gt;Script Path&lt;/code&gt; field to browse and find the &lt;code&gt;Deploy-CrmSolution.ps1&lt;/code&gt; script. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;$(System.DefaultWorkingDirectory)/DevBuild/drop/Nullfactory.Xrm.Tooling/Scripts/Deploy-CrmSolution.ps1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/70_CrmDeployStepScript.png" alt="Configure CRM deploy step script" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the following arguments for the script - notice that the previously defined variables &lt;code&gt;DevDeployLogin&lt;/code&gt; and &lt;code&gt;DevDeployPassword&lt;/code&gt; being used as part of the script.
&lt;code&gt;-serverUrl "https://servername.crm6.dynamics.com" -username "$(DevDeployLogin)" -password "$(DevDeployPassword)" -solutionName "Demo.AlphaSolution" -publishChanges -activatePlugins&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/90_FinalCrmDeployStep.png" alt="CRM deploy step final" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Expand the &lt;code&gt;Advanced&lt;/code&gt; tab and click the ellipsis button on the &lt;code&gt;Working Folder&lt;/code&gt; field. Set the working folder to the &lt;code&gt;Nullfactory.Xrm.Tooling\Scripts&lt;/code&gt; folder on the resulting dialog. I do this in order to minimize the chance of encountering any long file path issues.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/80_CrmDeployStepTarget.png" alt="Configure CRM deploy step target" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that everything is setup, time to test out our new release definition. Let's queue a new release.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/110_CreateRelease.png" alt="Create new release" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that the release is being deployed and that it completed successfully.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/120_ReleaseStatusInProgress.png" alt="Verify release status" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt3/130_ReleaseStatusComplete.png" alt="Verify release status complete" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it folks. That's the end of the three part series showing how to setup a project structure, configure a build and finally release a source-controlled CRM solution.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/sl-si/docs/release/managing-releases/create-release"&gt;Create a release in Microsoft Release Management for Visual Studio Team Services and Team Foundation Server 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/build/define/variables"&gt;Use build variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/build/scripts/"&gt;Use a PowerShell script to customize your build process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/release/author-release-definition/understanding-tasks"&gt;How to deploy? Microsoft Release Management Tasks for Visual Studio Team Services and Team Foundation Server 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2/</id><title type="text">Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build</title><summary type="html">&lt;p&gt;This is the second of a three part series in which I walk through setting up a release management strategy for Dynamics CRM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;Release Strategy for Dynamics CRM - Part 1 - Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/"&gt;Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/02/release-strategy-for-dynamics-crm-versioning-part-4/"&gt;Release Strategy for Dynamics CRM - Part 4 - Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In first part of the series accomplished the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup the project structure using the &lt;code&gt;nullfactory-xrm&lt;/code&gt; yeoman generator.    &lt;/li&gt;
&lt;li&gt;Download the CRM solution from the remote server and unpacked it using the solution packager tool.&lt;/li&gt;
&lt;li&gt;Checked-in all the artifacts back into Visual Studio Team Services (VSTS) source control.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post I describe the steps required for setting up a team build. One of the goals with the generated project structure was to have it work with team builds with the least amount configuration. &lt;/p&gt;

&lt;h2&gt;Setting Up the Team Build&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to the &lt;code&gt;Build and Release &amp;gt; Builds&lt;/code&gt; from within the VSTS team project.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt2/10_NewDefintion.png" alt="Build and Release Menue" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new build definition using a vanilla &lt;code&gt;Visual Studio&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt2/20_SelectBuildTemplate.png" alt="Visual Studio Template" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</summary><published>2016-11-11T13:00:00Z</published><updated>2016-11-11T13:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2/" /><content type="html">&lt;p&gt;This is the second of a three part series in which I walk through setting up a release management strategy for Dynamics CRM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;Release Strategy for Dynamics CRM - Part 1 - Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/"&gt;Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/02/release-strategy-for-dynamics-crm-versioning-part-4/"&gt;Release Strategy for Dynamics CRM - Part 4 - Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In first part of the series accomplished the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup the project structure using the &lt;code&gt;nullfactory-xrm&lt;/code&gt; yeoman generator.    &lt;/li&gt;
&lt;li&gt;Download the CRM solution from the remote server and unpacked it using the solution packager tool.&lt;/li&gt;
&lt;li&gt;Checked-in all the artifacts back into Visual Studio Team Services (VSTS) source control.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post I describe the steps required for setting up a team build. One of the goals with the generated project structure was to have it work with team builds with the least amount configuration. &lt;/p&gt;

&lt;h2&gt;Setting Up the Team Build&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to the &lt;code&gt;Build and Release &amp;gt; Builds&lt;/code&gt; from within the VSTS team project.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt2/10_NewDefintion.png" alt="Build and Release Menue" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new build definition using a vanilla &lt;code&gt;Visual Studio&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt2/20_SelectBuildTemplate.png" alt="Visual Studio Template" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;  

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you want to use the artifact from this build as part a release deployment, then we need to explicitly copy the deploy scripts into the artifact staging folder. Let's do this by clicking on the &lt;code&gt;Add Task&lt;/code&gt; and selecting &lt;code&gt;Copy Files&lt;/code&gt; task and licking the &lt;code&gt;add&lt;/code&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt2/30_CopyTask.png" alt="Copy Task" /&gt;&lt;/p&gt;

&lt;p&gt;This explicit copy is required because the &lt;code&gt;Nullfactory.Xrm.Tooling&lt;/code&gt; is not designated to build as part of the solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next let's configure the task with the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source Folder -  &lt;code&gt;$(build.sourcesdirectory)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Contents - &lt;code&gt;**/Deploy-*.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Target Folder - &lt;code&gt;$(build.artifactstagingdirectory)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the name of the task into something more meaningful - &lt;code&gt;Copy Deploy Scripts to: $(build.artifactstagingdirectory)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt2/40_CopyTaskParameters.png" alt="Copy Task" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure that the newly added task is set to execute before the &lt;code&gt;Publish Artifact: drop&lt;/code&gt; task.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save and provide the new build a name.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt2/50_BuildName.png" alt="Build Name" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let's test it out by queuing a new build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the build is complete, navigate to the artifacts and explore the drop folder to verify that all the required file have been copied .&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt2/60_BuildArtifacts.png" alt="Build Artifacts" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulations! Now you have team build that builds and packages the Dynamics CRM solution. Go forth and extend the definitions to suit your particular development workflow.&lt;/p&gt;

&lt;p&gt;In the next post I will show you how to setup a release management definition and automate deployment to Dynamics CRM environments.&lt;/p&gt;
</content></entry><entry><id>http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/</id><title type="text">Release Strategy for Dynamics CRM - Part 1 - Preparation</title><summary type="html">&lt;p&gt;Earlier this year I demonstrated the strategy I use for maintaining CRM solutions in source control. I favor the approach due to its ability to be used in team builds and automated releases. Since my original post, I have created a yeoman generator that allows to quickly scaffold the project structure for new projects. And now, in this series of posts, I will walk you through the steps in setting up a new project, creating a team build finally implementing a release strategy using Visual Studio Team Services. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release Strategy for Dynamics CRM - Part 1 - Preparation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/"&gt;Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/02/release-strategy-for-dynamics-crm-versioning-part-4/"&gt;Release Strategy for Dynamics CRM - Part 4 - Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to automate the process we first need to make sure that the solution is maintained in source control. &lt;/p&gt;

&lt;h2&gt;Prerequistes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Team System (VSTS) source control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Yeoman&lt;/code&gt; code generator with the &lt;code&gt;generator-nullfactory-xrm&lt;/code&gt; installed globally. Installation instructions can be found &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While in this particular demo I use a VSTS team project running on top of Git source control along with VSTS Release Management for the deployment, the same steps can be adapted to be used with any other build and release system.&lt;/p&gt;

&lt;h2&gt;Prepping the Solution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a Team Project and select &lt;code&gt;Git&lt;/code&gt; as the version control.&lt;/li&gt;
&lt;li&gt;Clone a working copy onto a local machine. &lt;/li&gt;
&lt;li&gt;Create a .gitignore file that excludes build output - let's use &lt;a href="https://github.com/github/gitignore/blob/master/VisualStudio.gitignore"&gt;GitHub's definitions for Visual Studio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;nullfactory-xrm&lt;/code&gt; yeoman generator in order to scaffold the project structure. More detailed instructions on running the generator can be found &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/10_YoGenerator.png" alt="nullfactory-xrm yo generator" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</summary><published>2016-10-29T13:00:00Z</published><updated>2016-10-29T13:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/" /><content type="html">&lt;p&gt;Earlier this year I demonstrated the strategy I use for maintaining CRM solutions in source control. I favor the approach due to its ability to be used in team builds and automated releases. Since my original post, I have created a yeoman generator that allows to quickly scaffold the project structure for new projects. And now, in this series of posts, I will walk you through the steps in setting up a new project, creating a team build finally implementing a release strategy using Visual Studio Team Services. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release Strategy for Dynamics CRM - Part 1 - Preparation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Release Strategy for Dynamics CRM - Part 2 - Setting Up the Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/"&gt;Release Strategy for Dynamics CRM - Part 3 - Setting Up the Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/02/release-strategy-for-dynamics-crm-versioning-part-4/"&gt;Release Strategy for Dynamics CRM - Part 4 - Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to automate the process we first need to make sure that the solution is maintained in source control. &lt;/p&gt;

&lt;h2&gt;Prerequistes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Team System (VSTS) source control.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Yeoman&lt;/code&gt; code generator with the &lt;code&gt;generator-nullfactory-xrm&lt;/code&gt; installed globally. Installation instructions can be found &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While in this particular demo I use a VSTS team project running on top of Git source control along with VSTS Release Management for the deployment, the same steps can be adapted to be used with any other build and release system.&lt;/p&gt;

&lt;h2&gt;Prepping the Solution&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a Team Project and select &lt;code&gt;Git&lt;/code&gt; as the version control.&lt;/li&gt;
&lt;li&gt;Clone a working copy onto a local machine. &lt;/li&gt;
&lt;li&gt;Create a .gitignore file that excludes build output - let's use &lt;a href="https://github.com/github/gitignore/blob/master/VisualStudio.gitignore"&gt;GitHub's definitions for Visual Studio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;nullfactory-xrm&lt;/code&gt; yeoman generator in order to scaffold the project structure. More detailed instructions on running the generator can be found &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/10_YoGenerator.png" alt="nullfactory-xrm yo generator" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;  

&lt;ol&gt;
&lt;li&gt;Open up the generated solution in Visual Studio.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Force re-install the &lt;code&gt;Microsoft.CrmSdk.CoreTools&lt;/code&gt; package into the &lt;code&gt;Nullfactory.Xrm.Tooling&lt;/code&gt; project. Do this by running the following command in the Package Manager Console.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Update-Package -reinstall -project "Nullfactory.Xrm.Tooling"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/20_UpdatePackage.png" alt="Update-Package -reinstall" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, sign the the plugins and workflows projects with a new strong key. Use the following command to generate a new key pair.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sn -k key.snk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/30_SignAssembly.png" alt="Sign Assembly" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, let's sync up the CRM solution by running the synchronize script located in the &lt;code&gt;Scripts&lt;/code&gt; folder in the &lt;code&gt;Nullfactory.Xrm.Tooling&lt;/code&gt; project. This script downloads the CRM solution from the remote server and then expand it using the &lt;code&gt;SolutionPackager.exe&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.\Sync-CrmSolution.Param.ps1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/40_SyncScript.png" alt="Sync-CrmSolution" /&gt;&lt;/p&gt;

&lt;p&gt;If you encounter the following error when executing the script - it means that you have both PsGet and OneGet installed and its conflicting with each other. &lt;a href="https://til.secretgeek.net/powershell/psget_conflicts_with_PowerShellGet.html"&gt;Simply uninstalling PsGet in order to resolve the conflict&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/50_InstallModuleError.png" alt="Install-Module Error" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before proceeding any further, let's verify that the crm solution project can be built and solution zip file is the output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stage all the generated files into source control.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, let's force stage the &lt;code&gt;coretools&lt;/code&gt; folder. Due to the way the CoreTools package installs itself it is necessary to explicitly include these files into source control for the team build to work.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add --force Nullfactory.Xrm.Tooling/bin/coretools/*.*&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally commit the changes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "initial commit"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmReleasePt1/60_GitCommit.png" alt="Install-Module Error" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the next post I will go into setting up a team build for this project.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://til.secretgeek.net/powershell/psget_conflicts_with_PowerShellGet.html"&gt;psget conflicts with PowerShellGet · Today I Learned (secretGeek)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/996417/what-is-install-module-command-in-powershell"&gt;StackOverflow - What is Install-Module command in Powershell? - Super User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/library/dd878350(v=vs.85).aspx"&gt;Installing a PowerShell Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;generator-nullfactory-xrm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2016/09/yeoman-generator-for-dynamics-crm-solutions/</id><title type="text">Yeoman Generator For Dynamics CRM Solutions</title><summary type="html">&lt;p&gt;I've previously experimented on creating a simplified way of &lt;a href="http://nullfactory.net/2016/01/crm-solution-tfs-microsoft-xrm-data-powershell/"&gt;maintaining CRM solutions in source control&lt;/a&gt;. While I was quite happy with the end result, the process of setting up the projects, scripts and post-build steps was a little bit tedious. &lt;/p&gt;

&lt;p&gt;This is where Yeoman code generator comes in. Yeoman is a very popular javascript based scaffolding engine that enables setting up new projects a breeze. I created my own custom generator that would help me to kick start new CRM solutions quickly. You can find the end product here: &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;https://www.npmjs.com/package/generator-nullfactory-xrm&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, install &lt;a href="http://yeoman.io"&gt;Yeoman&lt;/a&gt; and generator-nullfactory-xrm using &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g yo
npm install -g generator-nullfactory-xrm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then generate your new project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yo nullfactory-xrm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Execution&lt;/h2&gt;

&lt;p&gt;Template questions and their purpose:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visual Studio solution file name?  &lt;code&gt;The visual studio solution filename.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Visual Studio project prefix?  &lt;code&gt;The prefix for the projects generated. This can be an organization name or preferred convention.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM server url? &lt;code&gt;This is the source CRM server url. Example:[https://sndbx.crm6.dynamics.com](https://sndbx.crm6.dynamics.com)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Username? &lt;code&gt;The username used to connect to the source CRM server.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Password? &lt;code&gt;The password for the above account.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Solution Name? &lt;code&gt;The name of the CRM solution to be extracted.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add *.WebResource project? &lt;code&gt;Specifies if a new project should be created to manage the web resouces.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add *.Plugin project? &lt;code&gt;Specifies if a new plugin project should be created.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

</summary><published>2016-09-14T14:00:00Z</published><updated>2016-09-14T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2016/09/yeoman-generator-for-dynamics-crm-solutions/" /><content type="html">&lt;p&gt;I've previously experimented on creating a simplified way of &lt;a href="http://nullfactory.net/2016/01/crm-solution-tfs-microsoft-xrm-data-powershell/"&gt;maintaining CRM solutions in source control&lt;/a&gt;. While I was quite happy with the end result, the process of setting up the projects, scripts and post-build steps was a little bit tedious. &lt;/p&gt;

&lt;p&gt;This is where Yeoman code generator comes in. Yeoman is a very popular javascript based scaffolding engine that enables setting up new projects a breeze. I created my own custom generator that would help me to kick start new CRM solutions quickly. You can find the end product here: &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;https://www.npmjs.com/package/generator-nullfactory-xrm&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, install &lt;a href="http://yeoman.io"&gt;Yeoman&lt;/a&gt; and generator-nullfactory-xrm using &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g yo
npm install -g generator-nullfactory-xrm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then generate your new project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yo nullfactory-xrm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Execution&lt;/h2&gt;

&lt;p&gt;Template questions and their purpose:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visual Studio solution file name?  &lt;code&gt;The visual studio solution filename.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Visual Studio project prefix?  &lt;code&gt;The prefix for the projects generated. This can be an organization name or preferred convention.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM server url? &lt;code&gt;This is the source CRM server url. Example:[https://sndbx.crm6.dynamics.com](https://sndbx.crm6.dynamics.com)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Username? &lt;code&gt;The username used to connect to the source CRM server.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Password? &lt;code&gt;The password for the above account.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Source CRM Solution Name? &lt;code&gt;The name of the CRM solution to be extracted.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add *.WebResource project? &lt;code&gt;Specifies if a new project should be created to manage the web resouces.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add *.Plugin project? &lt;code&gt;Specifies if a new plugin project should be created.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Post Installation Setup&lt;/h2&gt;

&lt;p&gt;Start off by updating the packages for the &lt;code&gt;Nullfactory.Xrm.Tooling&lt;/code&gt; project. Open up the &lt;code&gt;Package Manager Console&lt;/code&gt; in Visual Studio and execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Update-Package -reinstall -Project Nullfactory.Xrm.Tooling
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, install the &lt;a href="https://github.com/seanmcne/Microsoft.Xrm.Data.PowerShell"&gt;&lt;code&gt;Microsoft.Xrm.Data.PowerShell&lt;/code&gt;&lt;/a&gt; powershell module. On a Windows 10 or later, do this by executing the included powershell script &lt;code&gt;Nullfactory.Xrm.Tooling\_Install\Install-Microsoft.Xrm.Data.PowerShell.ps1&lt;/code&gt; or manually running the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Install-Module -Name Microsoft.Xrm.Data.PowerShell -Scope CurrentUser
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Syncing a Solution to the Project&lt;/h2&gt;

&lt;p&gt;Anytime the CRM solution needs to be synchronized back to the project, execute the script located at &lt;code&gt;Nullfactory.Xrm.Tooling\Scripts\Sync-CrmSolution.Param.ps1&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Resource Mapping&lt;/h3&gt;

&lt;p&gt;Edit the mapping file to map to the appropriate resource project. They are located in the &lt;code&gt;Nullfactory.Xrm.Tooling\Mapping&lt;/code&gt; folder. 
More information on the structure of the mapping file can be found &lt;a href="https://msdn.microsoft.com/en-us/library/jj602987.aspx#use_command"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Building the CRM Solution&lt;/h2&gt;

&lt;p&gt;The repackaging the extracted solution is integrated as a post-build step of the solution class library. Simply build it to output both a managed as well as unmanaged  CRM solution package. &lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I think I did pretty good for my first generator and hope to continue to evolve it as I learn more about the templating engine.&lt;/p&gt;

&lt;p&gt;Here are some ideas that I have floating around:
* The ability to add multiple CRM solutions in one go.
* The ability to rename the Plugin and WebResources Project
* Add new projects after the initial project structure has been generated.
* Refactor the script to better re-use components.&lt;/p&gt;

&lt;p&gt;The generator is &lt;a href="https://github.com/shanec-/generator-nullfactory-xrm"&gt;hosted in GitHub&lt;/a&gt;. Please feel free to fork and hack away at it. I would also appreciate any feedback you might have. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nullfactory.net/2016/01/crm-solution-tfs-microsoft-xrm-data-powershell/"&gt;Strategy for Maintaining CRM Solutions in Team Foundation Server using Microsoft.Xrm.Data.PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yeoman.io/authoring/"&gt;Writing Your Own Yeoman Generator | Yeoman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scotch.io/tutorials/create-a-custom-yeoman-generator-in-4-easy-steps"&gt;Create A Custom Yeoman Generator in 4 Easy Steps | Scotch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2016/07/unable-to-qualify-lead/</id><title type="text">Unable to Qualify Lead</title><summary type="html">&lt;p&gt;I was investigating an issue in a customized Dynamics CRM environment where the "Qualify" ribbon button on the Lead record had mysteriously stopped working. &lt;/p&gt;

&lt;p&gt;Qualification from the grid and the organization service API appeared to work as expected, and this only seemed limited to the ribbon button. Given that the page was not even posting back to the server on clicking the button, I suspected it was failing at the front end. I fired up the chrome developer tools and sure enough was greeted with the following error on the console:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/UnableToQualifyLead/10_error-message.png" alt="Developer Tools Error Message" /&gt;&lt;/p&gt;

</summary><published>2016-07-22T14:00:00Z</published><updated>2016-07-22T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2016/07/unable-to-qualify-lead/" /><content type="html">&lt;p&gt;I was investigating an issue in a customized Dynamics CRM environment where the "Qualify" ribbon button on the Lead record had mysteriously stopped working. &lt;/p&gt;

&lt;p&gt;Qualification from the grid and the organization service API appeared to work as expected, and this only seemed limited to the ribbon button. Given that the page was not even posting back to the server on clicking the button, I suspected it was failing at the front end. I fired up the chrome developer tools and sure enough was greeted with the following error on the console:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/UnableToQualifyLead/10_error-message.png" alt="Developer Tools Error Message" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I eventually found &lt;a href="https://community.dynamics.com/crm/f/117/t/156598"&gt;this forum post&lt;/a&gt; that gave me the solution. It turns out that the out of the box JavaScript appears dependent upon two fields having to exist on the form - the &lt;code&gt;companyname&lt;/code&gt; and &lt;code&gt;transactioncurrencyid&lt;/code&gt; fields. They don't necessarily have to visible on the form, but added somewhere on the form.&lt;/p&gt;

&lt;p&gt;This particular environment was running Dynamics CRM 2015 OnPremise with update &lt;code&gt;0.1&lt;/code&gt;. My attempts at trying to replicate the issue on a CRM Online 2016 instance (version &lt;code&gt;8.1.0.367&lt;/code&gt; at the time of writing) were unsuccessful. The qualification process worked fine even without the fields on the form. This leads me to believe that this dependency might have been removed post 0.1.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://community.dynamics.com/crm/f/117/t/156598"&gt;Unable to Qualify Leads After 2015 Upgrade - Microsoft Dynamics CRM Community Forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry></feed>