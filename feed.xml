<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">nullfactory.net</title><subtitle type="text">nullfactory.net</subtitle><id>http://nullfactory.net/</id><updated>2017-06-25T17:29:13+10:00</updated><author><name>Shane Carvalho</name><uri>http://nullfactory.net</uri><email>shanec_@hotmail.com</email></author><generator>Sandra.Snow Atom Generator</generator><link rel="alternate" href="http://nullfactory.net/feed.xml" /><link rel="self" type="text/html" title="nullfactory.net" href="http://nullfactory.net/feed.xml" /><entry><id>http://nullfactory.net/2017/06/continuous-integration-and-continuous-delivery-of-dynamics-365-solutions-using-vsts/</id><title type="text">Continuous Integration and Continuous Delivery of Dynamics 365 Solutions using VSTS</title><summary type="html">&lt;p&gt;In previous posts I've setup build and release defintions for Dynamics CRM solutions and in this one I try my attempt at setting up an automated Continuous Delivery pipeline. There are two popular strategies used to make sure that &lt;a href="https://puppet.com/blog/continuous-delivery-vs-continuous-deployment-what-s-diff"&gt;every change made to a system can be deployed&lt;/a&gt; successfully to secondary environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Continuous Integration (CI)&lt;/p&gt;

&lt;p&gt;A CI build is one that is usually kicked off any time a piece of code is checked-in in order to give early visibility of any potential failures. The success of a build is dependent on the actual build plus any unit tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scheduled&lt;/p&gt;

&lt;p&gt;A scheduled build, also commonly referred to as a &lt;code&gt;Nightly Build&lt;/code&gt;, is a build and release that is performed on a regular cadence - usually every night. Once again, on the successful completion of the build and automated unit test, a new release is pushed to the staging environment.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both methods appear to be doing the same thing, so when should I choose a CI build + release over a scheduled build? The most &lt;a href="https://stackoverflow.com/questions/417134/continuous-integration-vs-nightly-builds"&gt;common metric&lt;/a&gt; appears to be the duration of your build and unit tests. The size of the team, the project and code complexity and the frequency of check-ins can have an impact on the time it takes for build and long running unit tests to execute. In these scenarios a &lt;code&gt;Scheduled&lt;/code&gt; build makes more sense.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;I was disappointed to find out that, at the time of writing this post, VSTS release definitions does not provide an option to trigger off a successful a scheduled build. The only options available are to trigger it off of a CI build or the automated schedule on the release itself. &lt;/p&gt;

&lt;p&gt;Luckily, Rene van Osnabrugge's &lt;a href="https://roadtoalm.com/2017/03/30/trigger-release-pipeline-only-for-scheduled-builds/"&gt;excellent post&lt;/a&gt; provides us with a workaround for this restriction. Here's an overview how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup a single build that performs all three roles (manually invoked, CI and scheduled). &lt;/li&gt;
&lt;li&gt;Add a task into the build that would to figure out which method was used to invoke. &lt;/li&gt;
&lt;li&gt;Apply the the reason as a build tag onto itself. &lt;/li&gt;
&lt;li&gt;Update the release definition to filter the the release trigger to be filtered only the scheduled tags.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets get started setting it up.&lt;/p&gt;

</summary><published>2017-06-24T14:00:00Z</published><updated>2017-06-24T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/06/continuous-integration-and-continuous-delivery-of-dynamics-365-solutions-using-vsts/" /><content type="html">&lt;p&gt;In previous posts I've setup build and release defintions for Dynamics CRM solutions and in this one I try my attempt at setting up an automated Continuous Delivery pipeline. There are two popular strategies used to make sure that &lt;a href="https://puppet.com/blog/continuous-delivery-vs-continuous-deployment-what-s-diff"&gt;every change made to a system can be deployed&lt;/a&gt; successfully to secondary environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Continuous Integration (CI)&lt;/p&gt;

&lt;p&gt;A CI build is one that is usually kicked off any time a piece of code is checked-in in order to give early visibility of any potential failures. The success of a build is dependent on the actual build plus any unit tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scheduled&lt;/p&gt;

&lt;p&gt;A scheduled build, also commonly referred to as a &lt;code&gt;Nightly Build&lt;/code&gt;, is a build and release that is performed on a regular cadence - usually every night. Once again, on the successful completion of the build and automated unit test, a new release is pushed to the staging environment.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both methods appear to be doing the same thing, so when should I choose a CI build + release over a scheduled build? The most &lt;a href="https://stackoverflow.com/questions/417134/continuous-integration-vs-nightly-builds"&gt;common metric&lt;/a&gt; appears to be the duration of your build and unit tests. The size of the team, the project and code complexity and the frequency of check-ins can have an impact on the time it takes for build and long running unit tests to execute. In these scenarios a &lt;code&gt;Scheduled&lt;/code&gt; build makes more sense.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;I was disappointed to find out that, at the time of writing this post, VSTS release definitions does not provide an option to trigger off a successful a scheduled build. The only options available are to trigger it off of a CI build or the automated schedule on the release itself. &lt;/p&gt;

&lt;p&gt;Luckily, Rene van Osnabrugge's &lt;a href="https://roadtoalm.com/2017/03/30/trigger-release-pipeline-only-for-scheduled-builds/"&gt;excellent post&lt;/a&gt; provides us with a workaround for this restriction. Here's an overview how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup a single build that performs all three roles (manually invoked, CI and scheduled). &lt;/li&gt;
&lt;li&gt;Add a task into the build that would to figure out which method was used to invoke. &lt;/li&gt;
&lt;li&gt;Apply the the reason as a build tag onto itself. &lt;/li&gt;
&lt;li&gt;Update the release definition to filter the the release trigger to be filtered only the scheduled tags.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets get started setting it up.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Team Services&lt;/li&gt;
&lt;li&gt;Existing team build - I will be re-using a Dynamics CRM project that I have used in &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2/"&gt;my previous post&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Existing release definition - Once again, I am using one that I've setup &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/"&gt;previously&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Build Definition&lt;/h2&gt;

&lt;p&gt;As in my previous posts I will be using a standard Dynamics CRM build for this demonstration. Follow the instructions in &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2/"&gt;my previous post&lt;/a&gt; for setting this up .&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmCICD/10_BuildDefinition.png" alt="Build Definition" /&gt;&lt;/p&gt;

&lt;p&gt;Now let's make the following modifications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From within the build definition, navigate to the &lt;code&gt;Triggers&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Enable the Continuous Integration trigger.&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;Batch changes while a build is in progress&lt;/code&gt; check box. &lt;/li&gt;
&lt;li&gt;Add a new Path filter by clicking the &lt;code&gt;add&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Set the type to &lt;code&gt;Exclude&lt;/code&gt; and &lt;code&gt;Path specification&lt;/code&gt; to &lt;code&gt;/Nullfactory.Xrm.Tooling&lt;/code&gt;. We don't really care for our tools to  This is so that we only trigger on the actual solution and not the supporting tools/project.&lt;/li&gt;
&lt;li&gt;Now enable the scheduled trigger.&lt;/li&gt;
&lt;li&gt;Provide a schedule that works for your team.&lt;/li&gt;
&lt;li&gt;Finally, save the changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmCICD/20_BuildDefinitionTrigger.png" alt="Build Definition Trigger" /&gt;&lt;/p&gt;

&lt;h3&gt;Tagging The Build&lt;/h3&gt;

&lt;p&gt;Next, we update the build to tag itself upon a successful build.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I downloaded the &lt;a href="https://gist.githubusercontent.com/renevanosnabrugge/3fa094790fab2b06db970d0da81a71b0/raw/a99220346be3803297412a4b580d8e1bd6dcbcf0/Set-BuildTagToTrigger.ps1"&gt;Set-BuildTagToTrigger.ps1&lt;/a&gt; script and added it part of the &lt;code&gt;Nullfactory.Xrm.Tooling/Scripts&lt;/code&gt; project folder.&lt;/li&gt;
&lt;li&gt;Commit and push the changes to the remote repository.&lt;/li&gt;
&lt;li&gt;From within the build editor, click on the &lt;code&gt;Add Task&lt;/code&gt; button and select a PowerShell task. I placed it as the last step in the order.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure it with the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Display Name :&lt;code&gt;Tag Build Reason&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type : &lt;code&gt;File Path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Script Path : &lt;code&gt;Nullfactory.Xrm.Tooling/Scripts/Set-BuildTagToTrigger.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Arguments : &lt;code&gt;-BuildId $(Build.BuildId)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmCICD/30_SetTagReasonPowerShell.png" alt="Set Tag Reason PowerShell" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure that the task only runs if all previous tasks have succeeded. Do this by navigating into &lt;code&gt;Control Options&lt;/code&gt; section and selecting the option within the &lt;code&gt;Run this task&lt;/code&gt; drop down.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order for the the script to have authenticated access to the REST service it requires access to the OAuth token. Do this now navigating to the &lt;code&gt;Options&lt;/code&gt; tab and enabling the &lt;code&gt;Allow scripts to access OAuth token&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmCICD/40_AllowODataToken.png" alt="OData Token" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Queue a new build and verify that a tag was associated with the build. Note that since we invoked the build explicitly, a &lt;code&gt;manual&lt;/code&gt; tag was added.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmCICD/50_VerifyBuild.png" alt="Verify Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The tags applied to the new build are the same values as the build reason environmental variable. We only care about the following scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Manual&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IndividualCI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BatchedCI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Schedule&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, we only care about the &lt;code&gt;Schedule&lt;/code&gt; typed of builds. Find the full list of available values &lt;a href="https://www.visualstudio.com/en-us/docs/build/define/variables"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The Release Definition&lt;/h2&gt;

&lt;p&gt;Now that the build is complete and we've proven that the solution is good enough to be deployed, let's create and augment our release definition.&lt;/p&gt;

&lt;p&gt;Follow the steps &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-release-part-3/"&gt;described here&lt;/a&gt; to create the basic release definition. Ensure that the linked source is the build definition we created earlier.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From within the release definition edit screen, navigate to the &lt;code&gt;Triggers&lt;/code&gt; menu.&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;Continuous Deployment&lt;/code&gt; check box.&lt;/li&gt;
&lt;li&gt;Select the build as the source from the drop down and the branch it should monitor.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;schedule&lt;/code&gt; as the tag filter.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Save&lt;/code&gt; to confirm changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmCICD/60_ReleaseDefinition.png" alt="Updated Release Definition" /&gt;&lt;/p&gt;

&lt;h2&gt;Verification&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Verify that the when the build is triggered via the schedule and that it has a &lt;code&gt;schedule&lt;/code&gt; tag is associated upon completion.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmCICD/70_ScheduledBuild.png" alt="Verify Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify that a release was deployed off of it.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/CrmCICD/80_TriggeredRelease.png" alt="Verify Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/learn/what-is-continuous-integration/"&gt;What is Continuous Integration? | DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/learn/what-is-continuous-delivery/"&gt;What is Continuous Delivery? | DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://puppet.com/blog/continuous-delivery-vs-continuous-deployment-what-s-diff"&gt;Continuous Delivery Vs. Continuous Deployment: What's the Diff? | Puppet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/417134/continuous-integration-vs-nightly-builds"&gt;Continuous Integration vs. Nightly Builds - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/build/define/triggers"&gt;Build definition triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://roadtoalm.com/2017/03/30/trigger-release-pipeline-only-for-scheduled-builds/"&gt;Trigger Release Pipeline only for Scheduled builds | The Road to ALM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/build/scripts/"&gt;Use a PowerShell script to customize your build process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/build/define/variables"&gt;Build variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2017/06/enforce-coding-standards-by-integrating-stylecop-validations/</id><title type="text">Enforce Code Standards by Integrating StyleCop Validations</title><summary type="html">&lt;p&gt;StyleCop is a configurable analysis library that ensures code produced conforms to it's coding standard. While the benefits of a consistent coding standard is clear, each team has there own strong opinions how it should be enforced. &lt;/p&gt;

&lt;p&gt;In my previous projects I've used the &lt;code&gt;StyleCop.MsBuild&lt;/code&gt; package and have been eager to try out the code analyzer version of the tool. In this post, I will start off with a quick run down of my attempt at integrating it into a solution.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Professional 2015 or higher. Its not really necessary, but makes for an easier setup and nicer integration with the Roslyn base analyzer. &lt;/li&gt;
&lt;li&gt;If integrating with an SCM or Automated build -  Visual Studio Team Services (VSTS) using git. The steps are not limited to VSTS, but its just my personal preference.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Installation itself is pretty simple - just install the &lt;code&gt;StyleCop.Analyzers&lt;/code&gt; nuget package by running the following command in the package manager console witihin Visual Studio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-Package StyleCop.Analyzers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's it. That all we need to do to get started.&lt;/p&gt;

&lt;h2&gt;Warning Vs. Error&lt;/h2&gt;

&lt;p&gt;By default StyleCop treats suggestions as warnings, but I prefer to go strict mode and treat all style cop validations as errors. This means that build actually fails if the code does not adhere to the style validations. My justification is that its always cheaper to fix these issues early in the development cycle as well as minimizing &lt;a href="https://blog.codinghorror.com/the-broken-window-theory/"&gt;"broken windows syndrome"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using the older &lt;code&gt;StyleCop.MSBuild&lt;/code&gt; package, I could just set the &lt;code&gt;StyleCopTreatErrorsAsWarnings&lt;/code&gt; environmental variable in the development machine or the team build and it will ensure that the the scope is limited to the StyleCop errors only. Unfortunately, with the Analyzers project it does not seem to be that simple. There exists an &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt; environmental variable, but this is global and treats any warnings as errors - not what I want.&lt;/p&gt;

</summary><published>2017-06-10T14:00:00Z</published><updated>2017-06-10T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/06/enforce-coding-standards-by-integrating-stylecop-validations/" /><content type="html">&lt;p&gt;StyleCop is a configurable analysis library that ensures code produced conforms to it's coding standard. While the benefits of a consistent coding standard is clear, each team has there own strong opinions how it should be enforced. &lt;/p&gt;

&lt;p&gt;In my previous projects I've used the &lt;code&gt;StyleCop.MsBuild&lt;/code&gt; package and have been eager to try out the code analyzer version of the tool. In this post, I will start off with a quick run down of my attempt at integrating it into a solution.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Professional 2015 or higher. Its not really necessary, but makes for an easier setup and nicer integration with the Roslyn base analyzer. &lt;/li&gt;
&lt;li&gt;If integrating with an SCM or Automated build -  Visual Studio Team Services (VSTS) using git. The steps are not limited to VSTS, but its just my personal preference.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Installation itself is pretty simple - just install the &lt;code&gt;StyleCop.Analyzers&lt;/code&gt; nuget package by running the following command in the package manager console witihin Visual Studio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-Package StyleCop.Analyzers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's it. That all we need to do to get started.&lt;/p&gt;

&lt;h2&gt;Warning Vs. Error&lt;/h2&gt;

&lt;p&gt;By default StyleCop treats suggestions as warnings, but I prefer to go strict mode and treat all style cop validations as errors. This means that build actually fails if the code does not adhere to the style validations. My justification is that its always cheaper to fix these issues early in the development cycle as well as minimizing &lt;a href="https://blog.codinghorror.com/the-broken-window-theory/"&gt;"broken windows syndrome"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using the older &lt;code&gt;StyleCop.MSBuild&lt;/code&gt; package, I could just set the &lt;code&gt;StyleCopTreatErrorsAsWarnings&lt;/code&gt; environmental variable in the development machine or the team build and it will ensure that the the scope is limited to the StyleCop errors only. Unfortunately, with the Analyzers project it does not seem to be that simple. There exists an &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt; environmental variable, but this is global and treats any warnings as errors - not what I want.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;So my plan is to create two rule sets and tie them down to two individual configurations. I will create one rule set used in the debug configuration and then a stricter one for the release configuration.&lt;/p&gt;

&lt;p&gt;Now let's configure the rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let's create a very simple console application called &lt;code&gt;AnalyzersDemo&lt;/code&gt;and open it up in Visual Studio.&lt;/li&gt;
&lt;li&gt;Install the &lt;code&gt;StyleCop.Analyzers&lt;/code&gt; package into the project.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, navigate to the &lt;code&gt;Analyze &amp;gt; Configure Code Analysis &amp;gt; For AnalyzersDemo]&lt;/code&gt; menu option.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/10_configureanalysis.png" alt="Code Analysis" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the resulting dialog, accept the default values by clicking the &lt;code&gt;Open&lt;/code&gt; button. This will open a dialog that allows us to configure the behaviour of the rule sets.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/20_opencustomize.png" alt="Code Analysis Customize" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select all the warnings related to &lt;code&gt;StyleCop.Analyzers&lt;/code&gt; and update the Action to &lt;code&gt;Error&lt;/code&gt;. Notice that a new rule set file has been created.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/30_customizerules.png" alt="Code Analysis Customize Rules" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Duplicate the rule set file and rename them &lt;code&gt;BaseRuleset.ruleset&lt;/code&gt; to &lt;code&gt;StrictRuleset.ruleset&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Move them them up as solution items. This is so that we can share the same rule sets against all the projects.&lt;/li&gt;
&lt;li&gt;Edit the files and give the name and descriptions more meaningful values.&lt;/li&gt;
&lt;li&gt;Remove all nodes except for the &lt;code&gt;&amp;lt;RuleSet&amp;gt;&lt;/code&gt; root node from the &lt;code&gt;BaseRuleset&lt;/code&gt; file so that it will revert the default action level.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, associate the two rule sets with the different configurations; the &lt;code&gt;BaseRuleset&lt;/code&gt; and &lt;code&gt;StrictRuleset&lt;/code&gt; to the &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; configuration respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/40_debugrules.png" alt="Debug RuleSet" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/50_releaserules.png" alt="Release RuleSet" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is the final project structure:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/60_projectstructure.png" alt="Project Structure" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now the strict validation is performed only when a &lt;code&gt;release&lt;/code&gt; build is performed.&lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;One may argue that the "draconian mode" of enforcing styles is not worth the potential disruption it causes.  So let's try to compromise - If your source control strategy uses multiple branches (which you should always do, by the way), the strict mode can be enforced as a gated check-in. This means that the rules are enforced only when a pull-request is made into the &lt;code&gt;master&lt;/code&gt; branch. Refer my &lt;a href="http://nullfactory.net/2017/05/gated-checkins-in-vsts-using-tfsvc-and-git/"&gt;previous post&lt;/a&gt; on setting up a gated branch policy.&lt;/p&gt;

&lt;p&gt;More information on customization of the StyleCop rules can be found &lt;a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/Configuration.md"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;And finally, here is a build manually executed with an explicit configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/65_queuebuild.png" alt="Queue Build" /&gt;&lt;/p&gt;

&lt;p&gt;The failure in a &lt;code&gt;release&lt;/code&gt; configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/70_releasebuild.png" alt="Release Build" /&gt;&lt;/p&gt;

&lt;p&gt;And warnings in &lt;code&gt;debug&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/StyleCopInteg/80_debugbuild.png" alt="Debug Build" /&gt;&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stylecop.codeplex.com/wikipage?title=Setting%20Up%20StyleCop%20MSBuild%20Integration"&gt;StyleCop - Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.marketinvoice.com/2015/09/06/using-roslyn-analysers/"&gt;Using, configuring and distributing Roslyn analysers in teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/StyleCop.MSBuild/"&gt;NuGet Gallery | StyleCop.MSBuild 4.7.55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers"&gt;GitHub - DotNetAnalyzers/StyleCopAnalyzers: An implementation of StyleCop rules using the .NET Compiler Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.codinghorror.com/the-broken-window-theory/"&gt;The Broken Window Theory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2017/06/resolving-race-condition-within-dynamics-365-process/</id><title type="text">Resolving a Race Condition Within a Dynamics 365 Process</title><summary type="html">&lt;p&gt;I was attempting to diagnose and issue for a client the other day. It revolves around a single workflow that is being executed on both the create and update event of a field. And within this workflow, a custom activity executed if the field matches a certain condition. The problem was that the custom activity was being executed twice when it was only expected to run once.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AsyncWorkflow/10_singleworkflow.png" alt="Single Workflow" /&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AsyncWorkflow/20_singleworkflow_trigger.png" alt="Workflow Triggger" /&gt;&lt;/p&gt;

&lt;p&gt;If we take the above example, it can be replicated easily:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new record where &lt;code&gt;Delivery Status&lt;/code&gt; is &lt;code&gt;Current&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Immediately update the record to &lt;code&gt;Pending&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Navigate to the background processes and ensure that the workflow was executed twice, once on the create and then again on the update. If you performed the update soon enough, you notice that both instances satisfied the citieria and the custom activity invoked.&lt;/p&gt;

&lt;p&gt;This behaviour is by design - when an async workflow is triggered it neither guarantees the immediate execution of the process nor the state of the record at the time it was queued. This means that the workflow would work against the latest version of the record at the time of execution.&lt;/p&gt;

</summary><published>2017-06-08T14:00:00Z</published><updated>2017-06-08T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/06/resolving-race-condition-within-dynamics-365-process/" /><content type="html">&lt;p&gt;I was attempting to diagnose and issue for a client the other day. It revolves around a single workflow that is being executed on both the create and update event of a field. And within this workflow, a custom activity executed if the field matches a certain condition. The problem was that the custom activity was being executed twice when it was only expected to run once.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AsyncWorkflow/10_singleworkflow.png" alt="Single Workflow" /&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AsyncWorkflow/20_singleworkflow_trigger.png" alt="Workflow Triggger" /&gt;&lt;/p&gt;

&lt;p&gt;If we take the above example, it can be replicated easily:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new record where &lt;code&gt;Delivery Status&lt;/code&gt; is &lt;code&gt;Current&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Immediately update the record to &lt;code&gt;Pending&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Navigate to the background processes and ensure that the workflow was executed twice, once on the create and then again on the update. If you performed the update soon enough, you notice that both instances satisfied the citieria and the custom activity invoked.&lt;/p&gt;

&lt;p&gt;This behaviour is by design - when an async workflow is triggered it neither guarantees the immediate execution of the process nor the state of the record at the time it was queued. This means that the workflow would work against the latest version of the record at the time of execution.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The solution was to break the workflow process into two different parent-child workflows. The parent workflow evaluates the critiera and execute the child workflow, and the child workflow invokes the custom workflow activity. In order to avoid the same race condition we encountered earlier, the parent workflow is set to run &lt;code&gt;synchronously&lt;/code&gt;. The child workflow will continue to be executed asynchronously.  &lt;/p&gt;

&lt;p&gt;The new structure of the workflow:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AsyncWorkflow/30_SplitSyncParent.png" alt="Split Synchronized Parent" /&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/AsyncWorkflow/40_SplitAsyncChild.png" alt="Split Asynchronized Child" /&gt; &lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I think the lesson learned here is that even though the benifits of going asynchronous are numerous, it is important to evaluate and implement one that works well with the particular business secenario. &lt;/p&gt;
</content></entry><entry><id>http://nullfactory.net/2017/05/gated-checkins-in-vsts-using-tfsvc-and-git/</id><title type="text">Gated Check-ins in Visual Studio Team Services using TFSVC and Git</title><summary type="html">&lt;p&gt;A continuous integration build ensures that the code within a source control repository can be compiled successfully after a commit. &lt;a href="https://www.thoughtworks.com/continuous-integration"&gt;It is defined as&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Continuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Where as CI builds occur after a commit has been merged into the repository, a gated check-in is a "pessimistic" process that would treat a commit as completed &lt;strong&gt;only&lt;/strong&gt; if the result of it being merged with the repository is a successful build.&lt;/p&gt;

&lt;p&gt;In this post I will try my hand in setting up a gated check-in using Visual Studio Team Services (VSTS). I will start off with TFSVC as the underlying version control system and then replicate the same functionality using Git.&lt;/p&gt;

&lt;h2&gt;Configuring a Gated Check-In Using TFSVC&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Prerequisite: A repository already exists in the remote server with project code checked-in. I will be using one of my demo CRM projects.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define the steps for the build that would act as the verification build.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/10_CIBuild.png" alt="Verification Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to the &lt;code&gt;Triggers&lt;/code&gt; tab within the build definition and enabling the &lt;code&gt;Gated Check-In&lt;/code&gt; trigger.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/20_GatedCheckIn.png" alt="Gated Check-In" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</summary><published>2017-05-14T14:00:00Z</published><updated>2017-05-14T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/05/gated-checkins-in-vsts-using-tfsvc-and-git/" /><content type="html">&lt;p&gt;A continuous integration build ensures that the code within a source control repository can be compiled successfully after a commit. &lt;a href="https://www.thoughtworks.com/continuous-integration"&gt;It is defined as&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Continuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Where as CI builds occur after a commit has been merged into the repository, a gated check-in is a "pessimistic" process that would treat a commit as completed &lt;strong&gt;only&lt;/strong&gt; if the result of it being merged with the repository is a successful build.&lt;/p&gt;

&lt;p&gt;In this post I will try my hand in setting up a gated check-in using Visual Studio Team Services (VSTS). I will start off with TFSVC as the underlying version control system and then replicate the same functionality using Git.&lt;/p&gt;

&lt;h2&gt;Configuring a Gated Check-In Using TFSVC&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Prerequisite: A repository already exists in the remote server with project code checked-in. I will be using one of my demo CRM projects.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define the steps for the build that would act as the verification build.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/10_CIBuild.png" alt="Verification Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to the &lt;code&gt;Triggers&lt;/code&gt; tab within the build definition and enabling the &lt;code&gt;Gated Check-In&lt;/code&gt; trigger.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/20_GatedCheckIn.png" alt="Gated Check-In" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;

&lt;ol&gt;
&lt;li&gt;Leave the &lt;code&gt;Run continuous integration triggers for committed changes&lt;/code&gt; unchecked. If a CI build has been configured and &lt;a href="https://www.visualstudio.com/en-us/docs/build/define/triggers"&gt;this option was checked&lt;/a&gt; then an additional CI build would run after a successful gated check-in build.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Testing Out the Process&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Make a change to the code that causes an compilation error. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check-in this code into the version control. Upon clicking the &lt;code&gt;Check In&lt;/code&gt; button within Visual Studio, the following warning dialog appears indicating that the new check-in would be stored as a shelveset until its successful completion: &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/30_GatedWarning.png" alt="Gated Check-In Warning" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uncheck the &lt;code&gt;Preserve my pending changes locally&lt;/code&gt; option and click on the &lt;code&gt;Build Changes&lt;/code&gt; button to kick off the build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, navigate to builds definition folder and confirm that the verification build was in fact triggered and that it failed as expected.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/40_GatedCIBuild.png" alt="Failed Gated Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since we did not opt-in to preserve our check-ins locally, let's retrieve it from the generated shelveset. Back in Visual Studio, navigate to the&lt;code&gt;Team Explorer&lt;/code&gt; window and from the &lt;code&gt;Actions&lt;/code&gt; menu click the &lt;code&gt;Find Shelvesets&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/50_FindShelveset.png" alt="Failed Gated Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the last shelveset that failed the build - it would be prefixed with &lt;code&gt;Gated_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/60_ShelvesetAssigned.png" alt="Shelvesets Assigned" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix the compilation errors we introduced previously and check in the changes.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/70_Recheckin.png" alt="Check-in Corrections" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify that the new check in and resultant gated-build is successful. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/TfsvcGatedCheckIns/80_BuildSuccess.png" alt="Successful Gated Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that the check-in has been merged, get the latest version of the code using Visual Studio.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Configuring a Gated Check-In Using Git&lt;/h2&gt;

&lt;p&gt;Branch Policies are used to implement gated check-ins in git. It is a feature in VSTS that provides rules to govern the activity within a branch and ensure the code quality and change management standards are followed. &lt;/p&gt;

&lt;p&gt;There are many &lt;a href="https://www.visualstudio.com/en-us/docs/git/branch-policies"&gt;policies available&lt;/a&gt; but I am interested only in the ones related to when a pull request is made.&lt;/p&gt;

&lt;p&gt;Given the way that git operates, it cannot be configured to have a gated check-in against every commit as we did with TFSVC. Instead the policy would be enforced during the pull requests between the topic branch to the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;The following steps describe the process of setting up a gated check-in on the &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Prerequisite: A repository already exists in the remote server with project code checked-in. I will be using one of my demo CRM projects.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start off by defining a build that would act as the verification.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/05_verificationbuild.png" alt="Verification Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to the repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Branches&lt;/code&gt; menu.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the ellipsis against the &lt;code&gt;master&lt;/code&gt; branch and on the menu and select &lt;code&gt;Branch Policies&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/10_updatebranch.png" alt="Update Branch" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under the &lt;code&gt;Automatically build pull requests&lt;/code&gt; menu check the &lt;code&gt;When team members create or update a pull request into the master branch, queue this build:&lt;/code&gt; option.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then select the build that you want to use to perform the verification.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/20_setupbranchpolicy.png" alt="Branch Policies" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;code&gt;Save Changes&lt;/code&gt; button to confirm the changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Testing out the Policy&lt;/h3&gt;

&lt;p&gt;Now let's test our branch policy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On the development machine, create a new local branch called &lt;code&gt;development&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Commit a change that causes a compilation error. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Push the branch and changes to the remote repository.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/30_devbranch.png" alt="Development Branch" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, log into VSTS and navigate to the &lt;code&gt;Branches&lt;/code&gt; menu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click on the ellipsis against the &lt;code&gt;development&lt;/code&gt; branch to open up the context menu. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the &lt;code&gt;New pull request&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/40_newpullrequest.png" alt="New pull request" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide a meaningful &lt;code&gt;Title&lt;/code&gt; and &lt;code&gt;Description&lt;/code&gt; and click on the &lt;code&gt;Create&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/50_pullrequestdialog.png" alt="New pull request" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that a new verification build has been queued for the pull request.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/60_verifybuild.png" alt="Verification Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that this build failed.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/70_confirmbuildfailed.png" alt="Confirm Build Failure" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let's fix the code, commit and push the change in to the repository.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/80_fixbuild.png" alt="Fix the build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify that the build policy has detected the new commit and automatically associated it with the pull request. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that a new build was triggered as a result and that its successful. The successful build completes the pull request.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/GitGatedCheckIns/90_completedpullrequest.png" alt="Complete Pull Request" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thoughtworks.com/continuous-integration"&gt;Continuous integration | ThoughtWorks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/build/define/triggers"&gt;Build definition triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/tfvc/check-folder-controlled-by-gated-check-build-process"&gt;Check in to a folder that is controlled by a gated check-in build process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-2015-Final-Release-Event/Git-Branches-and-Policies-in-Team-Foundation-Server-2015"&gt;Git Branches and Policies in Team Foundation Server 2015 | Visual Studio 2015 Final Release Event | Channel 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.msdn.microsoft.com/buckh/2016/03/20/gated-checkin-for-git-using-branch-policies-to-run-a-build-in-vsts-and-tfs/"&gt;Gated checkin for Git: Using Branch Policies to run a build in VSTS and TFS – Buck Hodges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/git/branch-policies"&gt;Protect your Git branches with policies | Team Services &amp;amp; TFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2017/05/reassignment-of-record-causes-attached-notes-to-update-its-modifiedby-user-field-in-dynamics-crm/</id><title type="text">Reassignment of Record Causes Attached Notes to Update its ModifiedBy User Field in Dynamics CRM</title><summary type="html">&lt;p&gt;My colleagues and I ran into a interesting problem the other day; we noticed that on some records all the notes attached to it were being updated seemingly randomly being updated. At first glance I was confused as to why this was happening, but we eventually found the steps to reproduce it: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a record &lt;code&gt;Record 1&lt;/code&gt; in an entity. This can either be a custom entity or out-of-the-box entity with notes and attachments enabled. &lt;/li&gt;
&lt;li&gt;If the notes control has not been added onto the form, do that now.&lt;/li&gt;
&lt;li&gt;Update it such that it has several notes created by different users.&lt;/li&gt;
&lt;li&gt;Next make sure that &lt;code&gt;Record 1&lt;/code&gt; is owned by &lt;code&gt;User A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Login as &lt;code&gt;User B&lt;/code&gt; and reassign the &lt;code&gt;Record 1&lt;/code&gt; to &lt;code&gt;User C&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if we observe the notes control it shows &lt;code&gt;User B&lt;/code&gt;'s name along side the date and time stamp. &lt;/p&gt;

&lt;p&gt;I was initially thrown off as to why the above actions changed the &lt;code&gt;Created By&lt;/code&gt; of the notes, but what I failed to realize was that the annotation control shows the &lt;code&gt;Modified By&lt;/code&gt; user and not the &lt;code&gt;Created By&lt;/code&gt;.&lt;/p&gt;

</summary><published>2017-05-03T14:00:00Z</published><updated>2017-05-03T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/05/reassignment-of-record-causes-attached-notes-to-update-its-modifiedby-user-field-in-dynamics-crm/" /><content type="html">&lt;p&gt;My colleagues and I ran into a interesting problem the other day; we noticed that on some records all the notes attached to it were being updated seemingly randomly being updated. At first glance I was confused as to why this was happening, but we eventually found the steps to reproduce it: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a record &lt;code&gt;Record 1&lt;/code&gt; in an entity. This can either be a custom entity or out-of-the-box entity with notes and attachments enabled. &lt;/li&gt;
&lt;li&gt;If the notes control has not been added onto the form, do that now.&lt;/li&gt;
&lt;li&gt;Update it such that it has several notes created by different users.&lt;/li&gt;
&lt;li&gt;Next make sure that &lt;code&gt;Record 1&lt;/code&gt; is owned by &lt;code&gt;User A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Login as &lt;code&gt;User B&lt;/code&gt; and reassign the &lt;code&gt;Record 1&lt;/code&gt; to &lt;code&gt;User C&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if we observe the notes control it shows &lt;code&gt;User B&lt;/code&gt;'s name along side the date and time stamp. &lt;/p&gt;

&lt;p&gt;I was initially thrown off as to why the above actions changed the &lt;code&gt;Created By&lt;/code&gt; of the notes, but what I failed to realize was that the annotation control shows the &lt;code&gt;Modified By&lt;/code&gt; user and not the &lt;code&gt;Created By&lt;/code&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The relationship between the custom entity and the &lt;code&gt;annotation&lt;/code&gt; entity is parental with &lt;code&gt;cascade all&lt;/code&gt; set on assignment, therefore when the parent record is reassigned, it automatically reassigns all the notes associated with it. The reassignment itself is considered an update and thus shows the the user who initiated the reassign as the &lt;code&gt;Modified By&lt;/code&gt; user.  And if you think about it you would see that CRM is behaving exactly as it should - the parent record and the notes are assigned to &lt;code&gt;User C&lt;/code&gt; while the last modified is set to &lt;code&gt;User B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this particular custom solution I was working on, the notes were being treated as immutable - that is the security roles were structured such that once created it would not be modified. The reassignment logic is done by an external process executed under an service account. So the reassignment and subsequent change of the &lt;code&gt;Modified By&lt;/code&gt; to the service account was confusing the users. &lt;/p&gt;

&lt;p&gt;I found that there are two potential workarounds for this, but each with its own caveats.&lt;/p&gt;

&lt;h2&gt;Workaround 1&lt;/h2&gt;

&lt;p&gt;The first approach is to alter the parental relationship of the record. Change the relationship behavior from &lt;code&gt;Parental&lt;/code&gt; to &lt;code&gt;Configurable Cascading&lt;/code&gt; and then the &lt;code&gt;Assign&lt;/code&gt; option from &lt;code&gt;Cascade All&lt;/code&gt; to &lt;code&gt;Cascade None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ReassignChildNotes/10_updated_relationship.png" alt="Updated Parental Relationship" /&gt;&lt;/p&gt;

&lt;p&gt;One caveat of this approach is that if the parent record is reassigned from a user in a higher business unit hierarchy to one in a lower business unit, the notes would not be visible to other users in the lower business unit. This is of course subject to the way the security permissions have been configured - your mileage may vary.&lt;/p&gt;

&lt;h2&gt;Workaround 2&lt;/h2&gt;

&lt;p&gt;Write a &lt;code&gt;pre-operation&lt;/code&gt; plugin that runs on the update of the annotation entity. Have it configured to run on the same service account as the one used by the external process. This way when the record is reassigned by the external process the last modified by user is still retained. &lt;/p&gt;

&lt;p&gt;Read more this approach &lt;a href="http://missdynamicscrm.blogspot.com.au/2014/06/crm-2011-2013-modify-createdon-createdby-modifiedon-modifiedby-using-SDK-CSharp.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class RetainModifiedByUserPlugin : IPlugin
{
    public void Execute(IServiceProvider serviceProvider)
    {
        IPluginExecutionContext context =
            (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

        #warning todo: defensive programming!

        var preImage = context.PreEntityImages["Image"];
        var previousUser = (EntityReference)preImage["modifiedby"];

        var updateRequest = new UpdateRequest() { Parameters = context.InputParameters };
        var modifiedBy = (EntityReference)updateRequest.Target["modifiedby"];

        // if record is modified by the service account
        if (modifiedBy.Id == context.UserId)
        {
            updateRequest.Target["modifiedby"] = previousUser;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The downside to this approach is that updating user has to be the designated "service account". I also think that changing the expected behaviour of the update functionality is not the best user experience, but once again depending on the requirement your mileage may vary. &lt;/p&gt;

&lt;p&gt;I can also confirm that this solution still works even with the latest version of Dynamics 365 online (&lt;code&gt;Version 1612 (8.2.1.176) (DB 8.2.1.176) online&lt;/code&gt; as of writing this post).&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://missdynamicscrm.blogspot.com.au/2014/06/crm-2011-2013-modify-createdon-createdby-modifiedon-modifiedby-using-SDK-CSharp.html"&gt;CRM 2011/ 2013 Modify CreatedOn, CreatedBy, ModifiedOn, and ModifiedBy Using SDK C# ~ Ms. Dynamics CRM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.msdn.microsoft.com/emeadcrmsupport/2012/08/01/the-truth-about-override-created-on-or-created-by-for-records-during-data-import/"&gt;The truth about ‘Override Created on or Created by for records during data import’ – EMEA Dynamics CRM Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.msdn.microsoft.com/emeadcrmsupport/2012/08/01/the-truth-about-override-created-on-or-created-by-for-records-during-data-import/"&gt;The truth about ‘Override Created on or Created by for records during data import’ – EMEA Dynamics CRM Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2017/04/enforce-commit-message-standards-and-generate-changelogs-via-git/</id><title type="text">Enforce Commit Message Standards and Generate Changelogs via Git</title><summary type="html">&lt;p&gt;In past projects my release note strategy has been a combination of custom scripts (to pull the changesets between releases) and good old fashioned elbow grease to manually create the notes. I was curious to know ways about the ways to achieve the same in git and learning about the techniques used in popular open source projects.  &lt;/p&gt;

&lt;p&gt;In order to automatically generate a changelog the repository requires consistent commits - and I found that there are three steps that can be done to achieve this: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enforcing commit message rules.&lt;/li&gt;
&lt;li&gt;Install and setup tools that help generate commit messages that are compliant.&lt;/li&gt;
&lt;li&gt;Generate the changelog for the project based on the commits.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js - instructions on installing node can be found &lt;a href="https://docs.npmjs.com/getting-started/installing-node"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;package.json&lt;/code&gt; file for your project. One can be generated by navigating to the root folder of the project, run the &lt;code&gt;npm init&lt;/code&gt; command and follow the instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Enforcing Commit Message Rules&lt;/h2&gt;

&lt;p&gt;The enforcing of the rules are done using &lt;code&gt;husky&lt;/code&gt; and &lt;code&gt;validate-commit-msg&lt;/code&gt; packages. &lt;code&gt;Husky&lt;/code&gt; makes it very easy to tap into the commit event and execute custom validation scripts and uses &lt;a href="https://tygertec.com/git-hooks-practical-uses-windows/"&gt;git hooks&lt;/a&gt; to do this. &lt;code&gt;validate-commit-msg&lt;/code&gt; implements the validation scheme - conventional commits - that we would be used when the commit occurs.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://conventionalcommits.org/"&gt;conventional commits specification site&lt;/a&gt; summarizes its advantages very well:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
  &lt;li&gt;Automatically generating CHANGELOGs.&lt;/li&gt;
  &lt;li&gt;Automatically determining a semantic version bump (based on the types of commits landed).&lt;/li&gt;
  &lt;li&gt;Communicating the nature of changes to teammates, the public, and other stakeholders.&lt;/li&gt;
  &lt;li&gt;Triggering build and publish processes.&lt;/li&gt;
  &lt;li&gt;Making it easier for people to contribute to your projects, by allowing them to explore a more structured commit history.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

</summary><published>2017-04-29T14:00:00Z</published><updated>2017-04-29T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/04/enforce-commit-message-standards-and-generate-changelogs-via-git/" /><content type="html">&lt;p&gt;In past projects my release note strategy has been a combination of custom scripts (to pull the changesets between releases) and good old fashioned elbow grease to manually create the notes. I was curious to know ways about the ways to achieve the same in git and learning about the techniques used in popular open source projects.  &lt;/p&gt;

&lt;p&gt;In order to automatically generate a changelog the repository requires consistent commits - and I found that there are three steps that can be done to achieve this: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enforcing commit message rules.&lt;/li&gt;
&lt;li&gt;Install and setup tools that help generate commit messages that are compliant.&lt;/li&gt;
&lt;li&gt;Generate the changelog for the project based on the commits.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js - instructions on installing node can be found &lt;a href="https://docs.npmjs.com/getting-started/installing-node"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;package.json&lt;/code&gt; file for your project. One can be generated by navigating to the root folder of the project, run the &lt;code&gt;npm init&lt;/code&gt; command and follow the instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Enforcing Commit Message Rules&lt;/h2&gt;

&lt;p&gt;The enforcing of the rules are done using &lt;code&gt;husky&lt;/code&gt; and &lt;code&gt;validate-commit-msg&lt;/code&gt; packages. &lt;code&gt;Husky&lt;/code&gt; makes it very easy to tap into the commit event and execute custom validation scripts and uses &lt;a href="https://tygertec.com/git-hooks-practical-uses-windows/"&gt;git hooks&lt;/a&gt; to do this. &lt;code&gt;validate-commit-msg&lt;/code&gt; implements the validation scheme - conventional commits - that we would be used when the commit occurs.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://conventionalcommits.org/"&gt;conventional commits specification site&lt;/a&gt; summarizes its advantages very well:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
  &lt;li&gt;Automatically generating CHANGELOGs.&lt;/li&gt;
  &lt;li&gt;Automatically determining a semantic version bump (based on the types of commits landed).&lt;/li&gt;
  &lt;li&gt;Communicating the nature of changes to teammates, the public, and other stakeholders.&lt;/li&gt;
  &lt;li&gt;Triggering build and publish processes.&lt;/li&gt;
  &lt;li&gt;Making it easier for people to contribute to your projects, by allowing them to explore a more structured commit history.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;!--excerpt--&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, navigate to the root of your project folder and install &lt;code&gt;husky&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install husky --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, install the &lt;code&gt;validate-commit-msg&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev validate-commit-msg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the &lt;code&gt;package.json&lt;/code&gt; scripts node to let husky know that we want to use the &lt;code&gt;validate-commit-msg&lt;/code&gt; validations with &lt;code&gt;husky&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"scripts": {
    "commitmsg": "validate-commit-msg"
},
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From now on any commits done would be validated against the standard. &lt;/p&gt;

&lt;h2&gt;Scaffold and Commit&lt;/h2&gt;

&lt;p&gt;Now that we have the validation in place, let make life easier by installing some tools that help us adhere to the rules. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install &lt;code&gt;Commitizen&lt;/code&gt; by running the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g commitizen 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;code&gt;cz-conventional-changelog&lt;/code&gt; adapter as part of the project - this is the conventional commits guide lines. Read more about this standard &lt;a href="https://conventionalcommits.org/"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#-git-commit-guidelines"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;commitizen init cz-conventional-changelog --save-dev --save-exact
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify that commitizen has been conifgured automatically in the &lt;code&gt;package.json&lt;/code&gt;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we have commitizen and its adapter installed, now its time to do some commits. The following command now replaces the usual &lt;code&gt;git commit&lt;/code&gt; command: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It would guide you interactively to create the best commit message based on the &lt;code&gt;conventional-changelog&lt;/code&gt; adapter. Find a recap of the message format &lt;a href="http://karma-runner.github.io/0.10/dev/git-commit-msg.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/ConventionalCommit/10_commitizen.png" alt="Commitizen" /&gt;&lt;/p&gt;

&lt;h2&gt;Generate Changelog&lt;/h2&gt;

&lt;p&gt;Now to generate the changelog. In my non-node.js based projects, I usually rely on the build process to bump the version number of the release, but node.js projects and tools appear to like the explicit versioning in the &lt;code&gt;package.json&lt;/code&gt; file and the same checked into source control. I can work with that.&lt;/p&gt;

&lt;p&gt;The following is the &lt;a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli#recommended-workflow"&gt;recommended workflow&lt;/a&gt; for generating the changelog:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
  &lt;li&gt;Make changes&lt;/li&gt;
  &lt;li&gt;Commit those changes&lt;/li&gt;
  &lt;li&gt;Make sure Travis turns green&lt;/li&gt;
  &lt;li&gt;Bump version in package.json&lt;/li&gt;
  &lt;li&gt;conventionalChangelog&lt;/li&gt;
  &lt;li&gt;Commit package.json and CHANGELOG.md files&lt;/li&gt;
  &lt;li&gt;Tag&lt;/li&gt;
  &lt;li&gt;Push&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's adapt these steps to work with our own workflow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I am going to install the command line version of &lt;code&gt;conventional-changelog&lt;/code&gt; which is &lt;code&gt;conventional-changelog-cli&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g conventional-changelog-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since this is the first time I am running it, I want the changelog to take all historical commits into consideration. I am going to run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conventional-changelog -p angular -i CHANGELOG.md -s -r 0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-p&lt;/code&gt; being the preset being used. I am using &lt;code&gt;angular&lt;/code&gt; in this case and uses this kind . More detailed explanation of the format can be found &lt;a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; the input file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; indicates that the input file and the output file are the same.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r 0&lt;/code&gt; How many releases to be generated from the latest. If &lt;code&gt;0&lt;/code&gt;, the whole changelog will be regenerated and the outfile will be overwritten Default: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full list of options available can be found by executing &lt;code&gt;conventional-changelog --help&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continue creating commits using the &lt;code&gt;git cz&lt;/code&gt; command. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;If you have a CI build setup, make sure that its successful. Then update the version number in the &lt;code&gt;package.json&lt;/code&gt; to a higher one.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now lets update the changelog using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conventional-changelog -p angular -i CHANGELOG.md -s 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the changelog has been updated with the new significant features. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Commit the changes back into git.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;These same steps can be applied to almost any project type including .NET. So I am pretty excited to test this out in the Dynamics CRM/365 projects. I also found out that visual studio 2017 &lt;a href="https://andrewlock.net/git-integration-improvements-in-visual-studio-2017/"&gt;plays nice with git hooks&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;Client Side&lt;/h3&gt;

&lt;p&gt;It is important to remember that Git Hooks are client site and that it can be &lt;a href="https://tygertec.com/git-hooks-practical-uses-windows/"&gt;overridden&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;... Client side hooks can often be bypassed, either by using low-level “plumbing” commands instead of the high-level “porcelain” commands, and often by passing the &lt;code&gt;–no-verify&lt;/code&gt; option to the command. For example, &lt;code&gt;git commit –no-verify&lt;/code&gt; will not run the pre-commit hook. ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On an open-source project, maybe the maintainer could possibly eye-ball the pull request and ensure that it is valid or squash and provide a different message?&lt;/p&gt;

&lt;h3&gt;Versioning&lt;/h3&gt;

&lt;p&gt;Since the &lt;code&gt;package.json&lt;/code&gt; would be driving the version number, in my .NET/Dynamics CRM projects, I can possibly implement a PowerShell script that would bumps the version of the CRM solution based on the &lt;code&gt;package.json&lt;/code&gt; instead of the build.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/getting-started/installing-node"&gt;02 - Installing Node.js and updating npm | npm Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli"&gt;conventional-changelog/packages/conventional-changelog-cli at master · conventional-changelog/conventional-changelog · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/cli/init"&gt;init | npm Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://notebook.aaronwest.net/2015/08/03/better-documentation-using-conventional-changelog.html"&gt;Better Documentation Using Conventional-Changelog - aaron’s engineering notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://conventionalcommits.org/"&gt;Conventional Commits 1.0.0-beta - Conventional Commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://karma-runner.github.io/0.10/dev/git-commit-msg.html"&gt;Karma - Git Commit Msg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#"&gt;Git Commit Message Conventions - Google Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://commitizen.github.io/cz-cli/"&gt;Commitizen by commitizen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/commitizen/cz-cli"&gt;GitHub - commitizen/cz-cli: The commitizen command line utility.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kentcdodds/validate-commit-msg"&gt;GitHub - kentcdodds/validate-commit-msg: githook to validate commit messages are up to standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/typicode/husky"&gt;GitHub - typicode/husky: Git hooks made easy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/41785974/how-can-i-use-husky-to-check-a-git-commit-message-format/41787949#41787949"&gt;How can I use husky to check a git commit message format? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andrewlock.net/git-integration-improvements-in-visual-studio-2017/"&gt;Git integration improvements in Visual Studio 2017 - git-hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tygertec.com/git-hooks-practical-uses-windows/"&gt;Git hooks, practical uses (yes, even on Windows) » tygertec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials/git-hooks"&gt;Git Hooks | Atlassian Git Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-release-part-3/</id><title type="text">Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 3 - Release and Deployment</title><summary type="html">&lt;p&gt;In this third and final installment I cover the steps involved in setting up the minimum release and deployment steps required for a successful Dynamics CRM/365 deployment. The steps and actions performed in the previous posts acts as prerequisites for this one.&lt;/p&gt;

&lt;p&gt;Related posts from the series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-setup-part-1/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 1 - Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 2 - Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 3 - Release and Deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Packages&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/"&gt;previous post&lt;/a&gt;, I setup the team build to automatically publish packages into the Octopus Deploy package repository. &lt;/p&gt;

&lt;p&gt;We can verify that they have indeed been published by navigating to the &lt;code&gt;Library &amp;gt; Packages&lt;/code&gt; tab for a list of available packages.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/05_published_package.png" alt="Available Packages" /&gt; &lt;/p&gt;

&lt;h2&gt;Defining the Environment&lt;/h2&gt;

&lt;p&gt;Environments are a logical grouping of targets / machines used by deployments. For the purpose of this post, I will create one environment - &lt;code&gt;Testing&lt;/code&gt; and it would contain a single CRM deployment target - the CRM Server). &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let's start off by clicking on the &lt;code&gt;Environments&lt;/code&gt; from the main menu to navigate to the environment configuration page.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Add environment&lt;/code&gt; in the resulting page.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;Testing&lt;/code&gt; as the name of the environment .&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/10_create_environment.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Save&lt;/code&gt; to confirm selection.&lt;/li&gt;
&lt;/ol&gt;

</summary><published>2017-04-24T14:00:00Z</published><updated>2017-04-24T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-release-part-3/" /><content type="html">&lt;p&gt;In this third and final installment I cover the steps involved in setting up the minimum release and deployment steps required for a successful Dynamics CRM/365 deployment. The steps and actions performed in the previous posts acts as prerequisites for this one.&lt;/p&gt;

&lt;p&gt;Related posts from the series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-setup-part-1/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 1 - Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 2 - Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 3 - Release and Deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Packages&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/"&gt;previous post&lt;/a&gt;, I setup the team build to automatically publish packages into the Octopus Deploy package repository. &lt;/p&gt;

&lt;p&gt;We can verify that they have indeed been published by navigating to the &lt;code&gt;Library &amp;gt; Packages&lt;/code&gt; tab for a list of available packages.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/05_published_package.png" alt="Available Packages" /&gt; &lt;/p&gt;

&lt;h2&gt;Defining the Environment&lt;/h2&gt;

&lt;p&gt;Environments are a logical grouping of targets / machines used by deployments. For the purpose of this post, I will create one environment - &lt;code&gt;Testing&lt;/code&gt; and it would contain a single CRM deployment target - the CRM Server). &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let's start off by clicking on the &lt;code&gt;Environments&lt;/code&gt; from the main menu to navigate to the environment configuration page.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Add environment&lt;/code&gt; in the resulting page.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;Testing&lt;/code&gt; as the name of the environment .&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/10_create_environment.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Save&lt;/code&gt; to confirm selection.&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Next, define the deployment target for this environment:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the Environments summary page and click the &lt;code&gt;Add deployment target&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;code&gt;Cloud Region&lt;/code&gt; as the deployment target.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/20_deployment_target.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;Test CRM Server&lt;/code&gt; as the &lt;code&gt;Display name&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Select the previously created &lt;code&gt;Testing&lt;/code&gt; as one of the &lt;code&gt;Environments&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new role called &lt;code&gt;crm instance&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/30_deployment_target2.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on &lt;code&gt;Save&lt;/code&gt; button to confirm.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/40_deployment_target3.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Variable Sets&lt;/h3&gt;

&lt;p&gt;I will be creating a variable set to host all settings required to connect to the CRM Server. It makes configuration easier and also provides us with the ability to reuse the same server in multiple projects.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From the main menu navigate to &lt;code&gt;Library &amp;gt; Variable Sets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on &lt;code&gt;Add variable set&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/50_variables.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define three new variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#{TestCRM-servername}&lt;/code&gt;: The CRM Server Url.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#{TestCRM-username}&lt;/code&gt;: The deployment username.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#{TestCRM-password}&lt;/code&gt;: The deployment password. On this one, set the &lt;code&gt;variable type&lt;/code&gt; as &lt;code&gt;Sensitive&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/60_variables_created.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;Save&lt;/code&gt; button.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Define the Project&lt;/h3&gt;

&lt;p&gt;Projects allow to define a proper release lifecyle by bringing together the different environments and deployment steps. &lt;/p&gt;

&lt;p&gt;Let's define a new project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to &lt;code&gt;Projects&lt;/code&gt; menu.&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Add project&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Provide a name and description. Leave the other options to default.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on &lt;code&gt;Save&lt;/code&gt; to confirm selection.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/70_create_project.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now associate our previously created variable set as part of our project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the &lt;code&gt;Variable &amp;gt; Library Variable Sets&lt;/code&gt; tab within the project.&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;Include variable sets from the Library&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose the previously created variable set.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/80_include_variable_project.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;Apply&lt;/code&gt; and then &lt;code&gt;Save&lt;/code&gt; buttons to confirm selection.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/90_include_variable_project2.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Setup the Deployment Process&lt;/h2&gt;

&lt;p&gt;The deployment steps are pretty simple and consists of two PowerShell scripts; the first one is an inline script that sets up the prerequisites while the second one does the actual deployment. &lt;/p&gt;

&lt;h3&gt;Prerequisite script&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the &lt;code&gt;Process&lt;/code&gt; tab within the project.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Add your first step&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select a &lt;code&gt;Run a Script&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/100_step_template.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the following parameters while accepting the default selections for the others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Step name&lt;/code&gt;: &lt;code&gt;Setup Prerequisites&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Run on&lt;/code&gt; : &lt;code&gt;Deployment targets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Runs on targets in roles&lt;/code&gt; : &lt;code&gt;crm instance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Script source&lt;/code&gt; : &lt;code&gt;Source code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Script&lt;/code&gt;: &lt;code&gt;Powershell&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide the following for the body of the script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/110_step_1.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; to apply changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Deployment Script&lt;/h3&gt;

&lt;p&gt;The steps are very similar to the previous one, but this time we want to execute a script that is already part of the package. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once again,click on &lt;code&gt;Add step&lt;/code&gt; and select a &lt;code&gt;Run a Script&lt;/code&gt; template:&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the following parameters while accepting the default selections for the others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Step name&lt;/code&gt;: &lt;code&gt;Deploy CRM Solution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Run on&lt;/code&gt; : &lt;code&gt;Deployment targets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Runs on targets in roles&lt;/code&gt; : &lt;code&gt;crm instance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Script source&lt;/code&gt; : &lt;code&gt;Script file inside a package&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep the &lt;code&gt;Package Feed&lt;/code&gt; on &lt;code&gt;Octopus Server (built-in)&lt;/code&gt; as we've already published our package into OD.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;Package ID&lt;/code&gt; to &lt;code&gt;gnxdemo.crm&lt;/code&gt;. This is the name that the build published.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the &lt;code&gt;Script file name&lt;/code&gt; value to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Nullfactory.Xrm.Tooling\Scripts\Deploy-CrmSolution.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the &lt;code&gt;Script parameters&lt;/code&gt; value to by integrating the variables that we created earlier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-serverUrl "#{TestCRM-servername}" -username "#{TestCRM-username}" -password "#{TestCRM-password}" -solutionName "gnxdemo.crm" -publishChanges -activatePlugins
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/120_step_2.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;Save&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/130_step_summary.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Release and Deployment&lt;/h2&gt;

&lt;p&gt;Now that we have everything setup let's create a new release and then deploy the same to the &lt;code&gt;Testing environment&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the Project page.&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Create Release&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Provide a version number for the new release. I gave it &lt;code&gt;0.0.1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ensure that the &lt;code&gt;Deploy CRM Solution&lt;/code&gt; step is referencing the latest version of the solution.&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Save&lt;/code&gt; button the confirm the release. The release page shows an overview of the release including the its lifecyle path and as well as the packages being deployed.&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Deploy to Testing&lt;/code&gt; in order to deploy the solution to the testing environment.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;code&gt;Deploy now&lt;/code&gt; button in the resulting page to kick off the deployment.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/140_deploy_release.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The page would redirect to a summary page showing the progress of the deployment. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/150_deploy_task_progress.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;Task Log&lt;/code&gt; to view a more verbose view of the solution being deployed.  &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt3/160_deploy_task_log.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;While I think I have barely scratched the surface of the features provided by Octopus Deploy, the process of writing this series of posts made me appreciate the intuitive structure of key concepts as well as the myriad of options available to support even the most complex of release life cycles. This series also gave me the opportunity to validate the flexibility of the project structure generated using the &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;generator-nullfactory-xrm&lt;/a&gt; - with its ability to work with different DevOps tools.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://octopus.com/docs/key-concepts/environments"&gt;Environments - Octopus Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://octopus.com/docs/key-concepts/projects"&gt;Projects - Octopus Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://octopus.com/docs/key-concepts/machine-roles"&gt;Machine Roles - Octopus Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://octopus.com/docs/deployment-targets"&gt;Deployment targets - Octopus Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://octopus.com/docs/deployment-targets/azure-cloud-service-target"&gt;Azure Cloud Service Deployment Targets - Octopus Deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/</id><title type="text">Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 2 - Build</title><summary type="html">&lt;p&gt;This is the second part of a series of posts where I attempt to deploy a Dynamics 365/CRM solution using Visual Studio Team Services (VSTS) and Octopus Deploy (OD). Previously, I setup an OD server and integrated it with VSTS - the steps describe in that post act as a prerequisite for this one. In this post we go about modifying an existing Dynamics CRM build definition to automatically package the release-artifact and upload it to the OD server for deployment. &lt;/p&gt;

&lt;p&gt;Related posts from the series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-setup-part-1/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 1 - Setup&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 2 - Build&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-release-part-3/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 3 - Release and Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Publishing Packages&lt;/h2&gt;

&lt;p&gt;There are a few different ways of getting a package into Octopus Deploy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remotely upload a package to Octopus Deploy's built-in repository.&lt;/li&gt;
&lt;li&gt;Make octopus deploy pull packages from an external feed. Find more information &lt;a href="https://www.visualstudio.com/en-us/docs/package/overview"&gt;here&lt;/a&gt; on setting up VSTS to publish an package feed.&lt;/li&gt;
&lt;li&gt;Manually upload the package into the built-in repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the method of publishing the package has no bearing on the end deployment -I chose to explicitly push to the remote octopus deploy server. &lt;/p&gt;

</summary><published>2017-04-23T14:00:00Z</published><updated>2017-04-23T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/" /><content type="html">&lt;p&gt;This is the second part of a series of posts where I attempt to deploy a Dynamics 365/CRM solution using Visual Studio Team Services (VSTS) and Octopus Deploy (OD). Previously, I setup an OD server and integrated it with VSTS - the steps describe in that post act as a prerequisite for this one. In this post we go about modifying an existing Dynamics CRM build definition to automatically package the release-artifact and upload it to the OD server for deployment. &lt;/p&gt;

&lt;p&gt;Related posts from the series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-setup-part-1/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 1 - Setup&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 2 - Build&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-release-part-3/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 3 - Release and Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Publishing Packages&lt;/h2&gt;

&lt;p&gt;There are a few different ways of getting a package into Octopus Deploy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remotely upload a package to Octopus Deploy's built-in repository.&lt;/li&gt;
&lt;li&gt;Make octopus deploy pull packages from an external feed. Find more information &lt;a href="https://www.visualstudio.com/en-us/docs/package/overview"&gt;here&lt;/a&gt; on setting up VSTS to publish an package feed.&lt;/li&gt;
&lt;li&gt;Manually upload the package into the built-in repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the method of publishing the package has no bearing on the end deployment -I chose to explicitly push to the remote octopus deploy server. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Updating the Build Definition&lt;/h2&gt;

&lt;p&gt;A quick summary of the notable steps in the existing build definition:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt2/10_starting_build_def.png" alt="Existing Build Definition" /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The actual &lt;code&gt;msbuild&lt;/code&gt; command that is being used to build the solution.&lt;/li&gt;
&lt;li&gt;Copy the built artifacts to the staging folder.&lt;/li&gt;
&lt;li&gt;Explicitly Copy Deployment Scripts into the staging folder.&lt;/li&gt;
&lt;li&gt;Delete binaries (such as plugins and workflows) that have already been packaged as part of the solution package. As these serve no purpose in the final drop, I explicitly delete them to reduce the file size.&lt;/li&gt;
&lt;li&gt;Publish the files in the staging folder into the final drop artifact.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Review my previous post on setting up the build definition &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let's start implementing the changes to the definition:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add the &lt;code&gt;Package Application&lt;/code&gt; task.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt2/20_add_package_app.png" alt="Add Package Application Task" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the task by providing the following details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Package ID&lt;/code&gt; : This is unique identification for the package. I provided &lt;code&gt;gnxdemo.crm&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Package Format&lt;/code&gt; : Choose between NuGet and Zip. I chose NuGet. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Package Version&lt;/code&gt; : Configure this as appropriate. The generated package version should follow a valid SemVer versioning strategy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Source Path&lt;/code&gt; : Set this to the &lt;code&gt;$(build.artifactstagingdirectory)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Output Path&lt;/code&gt; : Set it to a dedicated folder within the staging directory. I used &lt;code&gt;$(build.artifactstagingdirectory)\OctopusDeploy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt2/30_config_package_app.png" alt="Configure Package Application Task" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, add the &lt;code&gt;Push Package&lt;/code&gt; task.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt2/40_add_push_package.png" alt="Add Push Package Task" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the task by providing the following details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Octopus Deploy Server&lt;/code&gt; : Choose the available server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Package&lt;/code&gt;: This is the location of the package file. Since I am only creating a single package I setup the path resolution using a wildcard &lt;code&gt;$(build.artifactstagingdirectory)\OctopusDeploy\*.nupkg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt2/50_config_package.png" alt="Configure Push Package Task" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the &lt;code&gt;Publish Artifact: drop&lt;/code&gt; task as it is no longer necessary.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt2/60_remove_pushlish_artifacts.png" alt="Remove Publish Artifact Task" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Queue a new build to make sure that everything is in order.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt2/70_queued_build.png" alt="Queue New Build" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log into the Octopus Deploy admin panel. Navigate to the &lt;code&gt;Library &amp;gt; Packages&lt;/code&gt; and ensure that the package has successfully uploaded.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt2/80_published_package.png" alt="Available Packages" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That completes the changes to the build definition. In the &lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-release-part-3/"&gt;next post&lt;/a&gt; I will go about configuring the environments, project definition and the deployment process within Octopus Deploy.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://octopus.com/docs/guides/use-the-team-foundation-build-custom-task"&gt;Using the Team Foundation Build Custom Tasks - Octopus Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/package/overview"&gt;Package Management in Team Services and TFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-setup-part-1/</id><title type="text">Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 1 - Setup</title><summary type="html">&lt;p&gt;I have seen &lt;a href="https://octopus.com/"&gt;Octopus Deploy (OD)&lt;/a&gt; being mentioned frequently in the community but haven't had a chance to play around with it myself. Therefore, I think that attempting to deploy a Dynamics 365/CRM solution using Octopus Deploy seemed like the perfect exercise to learn more about the platform and its features.&lt;/p&gt;

&lt;p&gt;I was curious if there were other developers who have released Dynamics CRM using Octopus Deploy and sure enough there was some one who had &lt;a href="https://www.youtube.com/watch?v=--9u5azwSb4"&gt;already thought of that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this series of posts I try to cover everything from setting up integration with Visual Studio Team Services(VSTS), updating a build definition to automatically publish itself and then finally setting up a simple release and deployment pipeline.&lt;/p&gt;

&lt;p&gt;Related posts from the series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 1 - Setup &lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 2 - Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-release-part-3/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 3 - Release and Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Project structure and deployment scripts based on &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;generator-nullfactory-xrm&lt;/a&gt; (with a minimum version of at least 1.4.0). &lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;Read More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The project checked into Visual Studio Team Services (VSTS) using either &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;tfsvc&lt;/code&gt; with a working team build already setup. &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Read More&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Installation of Octopus Deploy and ensure sure that it is publicly accessible. &lt;a href="https://www.youtube.com/watch?v=T0BQvMDXPNQ"&gt;Read More&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Strategy&lt;/h2&gt;

&lt;p&gt;When I saw the integration tasks provided by the OD extensions for VSTS, my first reaction was to divide the tasks between the build and the release in VSTS. I wanted to the the build definition to build and package the solution and pass it on to release management. Release management would then publishing the release-artifact to OD and explicitly remote trigger the OD deployment.&lt;/p&gt;

&lt;p&gt;While it was certainly possible to set this up, its did not make sense to have two deployment services for the same pipeline. Therefore the strategy is going to be very similar to the one that I had done previously - VSTS would continue to act as the version control and build server but this time Octopus deploy would act as the release component.&lt;/p&gt;

&lt;p&gt;The build server would handle creating compatible package and uploading it to the OD package repository. And OD takes over the management of the environment, release and deployment complexities.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/05_overview.png" alt="Release Strategy Overview" /&gt;&lt;/p&gt;

</summary><published>2017-04-22T14:00:00Z</published><updated>2017-04-22T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-setup-part-1/" /><content type="html">&lt;p&gt;I have seen &lt;a href="https://octopus.com/"&gt;Octopus Deploy (OD)&lt;/a&gt; being mentioned frequently in the community but haven't had a chance to play around with it myself. Therefore, I think that attempting to deploy a Dynamics 365/CRM solution using Octopus Deploy seemed like the perfect exercise to learn more about the platform and its features.&lt;/p&gt;

&lt;p&gt;I was curious if there were other developers who have released Dynamics CRM using Octopus Deploy and sure enough there was some one who had &lt;a href="https://www.youtube.com/watch?v=--9u5azwSb4"&gt;already thought of that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this series of posts I try to cover everything from setting up integration with Visual Studio Team Services(VSTS), updating a build definition to automatically publish itself and then finally setting up a simple release and deployment pipeline.&lt;/p&gt;

&lt;p&gt;Related posts from the series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 1 - Setup &lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 2 - Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-release-part-3/"&gt;Deploy Dynamics CRM Solutions using VSTS and Octopus Deploy - Part 3 - Release and Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Project structure and deployment scripts based on &lt;a href="https://www.npmjs.com/package/generator-nullfactory-xrm"&gt;generator-nullfactory-xrm&lt;/a&gt; (with a minimum version of at least 1.4.0). &lt;a href="http://nullfactory.net/2016/10/release-strategy-for-dynamics-crm-prepping-part-1/"&gt;Read More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The project checked into Visual Studio Team Services (VSTS) using either &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;tfsvc&lt;/code&gt; with a working team build already setup. &lt;a href="http://nullfactory.net/2016/11/release-strategy-for-dynamics-crm-setting-up-the-build-part-2"&gt;Read More&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Installation of Octopus Deploy and ensure sure that it is publicly accessible. &lt;a href="https://www.youtube.com/watch?v=T0BQvMDXPNQ"&gt;Read More&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Strategy&lt;/h2&gt;

&lt;p&gt;When I saw the integration tasks provided by the OD extensions for VSTS, my first reaction was to divide the tasks between the build and the release in VSTS. I wanted to the the build definition to build and package the solution and pass it on to release management. Release management would then publishing the release-artifact to OD and explicitly remote trigger the OD deployment.&lt;/p&gt;

&lt;p&gt;While it was certainly possible to set this up, its did not make sense to have two deployment services for the same pipeline. Therefore the strategy is going to be very similar to the one that I had done previously - VSTS would continue to act as the version control and build server but this time Octopus deploy would act as the release component.&lt;/p&gt;

&lt;p&gt;The build server would handle creating compatible package and uploading it to the OD package repository. And OD takes over the management of the environment, release and deployment complexities.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/05_overview.png" alt="Release Strategy Overview" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Integrate Octopus Deploy with VSTS&lt;/h2&gt;

&lt;p&gt;Let's start of by integrating OD with VSTS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into the Octopus Deploy admin panel with an user account that has enough permission to generate an API key.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/10_od_api_profile.png" alt="API Profile" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;Profile&lt;/code&gt; and navigate to the &lt;code&gt;API keys&lt;/code&gt; tab and generate a new API key.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/20_generate_new_api_key.png" alt="Generate New API Key" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the newly generated API key. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/30_api_key.png" alt="API Key" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, log into VSTS using the project collection administrator account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=octopusdeploy.octopus-deploy-build-release-tasks"&gt;Octopus Deploy Integration&lt;/a&gt; extension.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/40_od_integ.png" alt="OD VSTS Integration" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/50_od_integ_install_complete.png" alt="Integration Installation Complete" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we create a OD connected service that would expose the build tasks required by the team build. Let's start off by navigating to the &lt;code&gt;Settings &amp;gt; Services&lt;/code&gt; tab.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Clicking on the &lt;code&gt;New Service Endpoint&lt;/code&gt; under the &lt;code&gt;Endpoints&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Octopus Deploy&lt;/code&gt; from the list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/60_service_endpoint.png" alt="Project structure" /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provide the details of your OD environment and previously generated API key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="http://nullfactory.net/images/posts/OctoDeployPt1/70_service_endpoint2.png" alt="Project structure" /&gt;&lt;/p&gt;

&lt;p&gt;Now that the VSTS environment is connected with OD, we move onto working on the build definition. In my &lt;a href="http://nullfactory.net/2017/04/deploy-dynamics-crm-solutions-vsts-octopus-deploy-build-part-2/"&gt;next post&lt;/a&gt; I will go about updating a previously setup build definition to automatically package the solution and publish it to Octopus Deploy. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=--9u5azwSb4"&gt;July 2016 Meeting - Automated Deployment in CRM Using Octopus Deploy - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visualstudio.com/en-us/docs/marketplace/get-vsts-extensions"&gt;Get extensions for Visual Studio Team Services | Visual Studio Team Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://octopus.com/docs/guides/use-the-team-foundation-build-custom-task"&gt;Using the Team Foundation Build Custom Tasks - Octopus Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://octopus.com/docs/how-to/how-to-create-an-api-key"&gt;How to create an API key - Octopus Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=FOxqnle2bCc"&gt;Octopus 3.0 part 1: Introduction - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=T0BQvMDXPNQ"&gt;Octopus 3.0 part 2: Installing the Octopus Deploy Server - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><id>http://nullfactory.net/2017/04/version-140-generator-nullfactory-xrm-published/</id><title type="text">Version 1.4.0 of generator-nullfactory-xrm Published</title><summary type="html">&lt;p&gt;Version &lt;code&gt;1.4.0&lt;/code&gt; of the generator released. It includes the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added support to deploy third-party CRM solutions.&lt;/li&gt;
&lt;li&gt;CRM SDK assemblies updated:
&lt;ul&gt;
&lt;li&gt;Microsoft.CrmSdk.CoreTools &lt;code&gt;8.1.0.2&lt;/code&gt; =&gt; &lt;code&gt;8.2.0.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Microsoft.CrmSdk.CoreAssemblies &lt;code&gt;8.1.0.2&lt;/code&gt; =&gt; &lt;code&gt;8.2.0.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Microsoft.CrmSdk.Workflow &lt;code&gt;8.1.0.2&lt;/code&gt; =&gt; &lt;code&gt;8.2.0.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If opted-in to generate plugins and workflows projects, the generator would automatically create mapping entries in the &lt;code&gt;mapping-xml&lt;/code&gt; file. &lt;/li&gt;
&lt;li&gt;PowerShell script updates:
&lt;ul&gt;
&lt;li&gt;Better handling of exception and failure flows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.param.ps1&lt;/code&gt; scripts to have high verbosity by default.&lt;/li&gt;
&lt;li&gt;Fixed deploy script to have the new solution name. (i.e. &lt;code&gt;ProjectPrefix+SolutionName&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;Improved help documentation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

</summary><published>2017-04-17T14:00:00Z</published><updated>2017-04-17T14:00:00Z</updated><link rel="alternate" href="http://nullfactory.net/2017/04/version-140-generator-nullfactory-xrm-published/" /><content type="html">&lt;p&gt;Version &lt;code&gt;1.4.0&lt;/code&gt; of the generator released. It includes the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added support to deploy third-party CRM solutions.&lt;/li&gt;
&lt;li&gt;CRM SDK assemblies updated:
&lt;ul&gt;
&lt;li&gt;Microsoft.CrmSdk.CoreTools &lt;code&gt;8.1.0.2&lt;/code&gt; =&gt; &lt;code&gt;8.2.0.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Microsoft.CrmSdk.CoreAssemblies &lt;code&gt;8.1.0.2&lt;/code&gt; =&gt; &lt;code&gt;8.2.0.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Microsoft.CrmSdk.Workflow &lt;code&gt;8.1.0.2&lt;/code&gt; =&gt; &lt;code&gt;8.2.0.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If opted-in to generate plugins and workflows projects, the generator would automatically create mapping entries in the &lt;code&gt;mapping-xml&lt;/code&gt; file. &lt;/li&gt;
&lt;li&gt;PowerShell script updates:
&lt;ul&gt;
&lt;li&gt;Better handling of exception and failure flows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.param.ps1&lt;/code&gt; scripts to have high verbosity by default.&lt;/li&gt;
&lt;li&gt;Fixed deploy script to have the new solution name. (i.e. &lt;code&gt;ProjectPrefix+SolutionName&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;Improved help documentation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Please feel free to submit any feature requests or issues found to https://github.com/shanec-/generator-nullfactory-xrm/issues&lt;/p&gt;
</content></entry></feed>